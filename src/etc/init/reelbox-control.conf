# reelbox-control -
#

description     "reelbox-control"

start on (virtual-filesystems
          and tty-device-added DEVNAME=/dev/ttyS0)
stop on runlevel [!23]

expect fork
respawn
#console output

pre-start script
        . /etc/default/globals
        MyName="reelbox-control"
        REELFPCTL="/sbin/reelfpctl"
        set +e
        if [ ! -x $REELFPCTL ] ; then
        	while ! chmod 755 $REELFPCTL ; do
        	    c=$((c+1))
        	    sleep 1
        	done
        	/sbin/dev_frontpanel.sh
        fi

        d=0
        while [ ! -f /dev/.frontpanel.caps ] ; do
        	d=$((d+1))
        	sleep 1
        	[ $d -gt 30 ] && break
        done
        echo "waited $d sec for /dev/.frontpanel.caps" > /var/run/reelbox-control.upstart
        [ -L /dev/frontpanel ] || /sbin/dev_frontpanel.sh

	if ! [ -f /dev/.frontpanel.caps ]; then
	    #capability check is now done in /sbin/dev_frontpanel.sh
	    CAPS=$($REELFPCTL -capability)
	    echo $CAPS > /dev/.frontpanel.caps

	    #method with new PIC: reelfpctl -pwrctl 5a2100 (call 2x)
	    #last byte: 00=AVG3, 01=NCL2
	fi

        if grep -q AVR /dev/.frontpanel.caps ; then
            echo "Doing version check" >> /var/run/reelbox-control.upstart
            version=$($REELFPCTL -only-avr -getversion | tr -d " ")
            c=0
            while [ -z $version ] ; do
                    c=$((c+1))
                    sleep 1
                    version=$($REELFPCTL -only-avr -getversion | tr -d " ")
                    [ $c -gt 7 ] && break
            done
            [ -z $version ] && version=0

            # check for latest frontpanel firmware. This must be loaded before reelbox-control is started
            firm=`ls /usr/share/reel/frontpanel/main.flash-* | tail -1`
            new_version=`echo $firm | tr -d [A-Za-z-/.]`

            if [ $new_version -gt $version ]; then
                    $REELFPCTL -toptext "Doing frontpanel upgrade"
                    #we wait until rootfs is writeable. reelfpctl MUST be set to non-executeable.
                    while ! chmod 000 $REELFPCTL ; do
                        c=$((c+1))
                        sleep 1
                    done
                    Syslog "New version of frontpanel firmware available. Doing update."
                    if nice -15 avr_flasher -c $new_version -w $firm ; then
                            Syslog "Successfully written new frontpanel firmware $new_firm to AVR."
                            sleep 7 || true  # wait for frontpanel to reboot
                    fi
                    chmod 755 $REELFPCTL
            fi
            #firmware update end

            #i=0
            #while [ ! -c /dev/frontpanel ] ; do
            #        i=$((i+1))
            #        sleep 1
            #done
            #logger -t reelbox-control.upstart "waited $i seconds for /dev/frontpanel"
            #echo "waited $i seconds for /dev/frontpanel, $c sec for getversion, CAPS: $CAPS" >> /var/run/reelbox-control.upstart
        fi

        echo "waited $c sec for getversion, CAPS: $CAPS" >> /var/run/reelbox-control.upstart
        echo "old FP firmware: $version, new: $new_version" >> /var/run/reelbox-control.upstart

	# test for plausible date (>01/01/2001), if not, get date from frontpanel
	echo "test for plausible date" >> /var/run/reelbox-control.upstart
	testdate=$(date +%s -d "01/01/2001")
	now=$(date +%s)
(
	if [ $now -lt $testdate ] ; then
	    # wrong date, retrieve time from frontpanel
	    echo "wrong date, retrieve time from frontpanel"
	    i=0
	    while [ -z "$clock" ] ; do
		i=$((i+1))
		sleep 1
		clock=$($REELFPCTL -getclock)
	    done
	    fptime=$((0x`echo $clock | cut -f4- -d" " | tr -d " "`))
	    echo "clock: $clock fptime: $fptime, had to ask $i times"
	    if [ $(($fptime)) -gt 1000 ]; then
		echo "setting date"
		date -s @$(($fptime)) &
	    fi
	fi
) >> /var/run/reelbox-control.upstart 2>&1

        #check for ICE-Box and load 8051 firmware ### RC: temporary disabled
        if false ; then # grep -q 80860709 /proc/bus/pci/devices ; then
            echo "check for ICE-Box and load 8051 firmware" >> /var/run/reelbox-control.upstart
            /sbin/load_8051 /usr/share/reel/frontpanel/ice4200_8051_firmware.bin || true
            CAPS=$($REELFPCTL -capability)
        fi


        #prepare uinput driver, load kernel module if neccessary
        if ! grep -q uinput /proc/modules ; then
                modprobe uinput
        fi

        # wait for /dev/uinput to come ready, otherwise vdr will ask to learn the keys...
        echo "wait for /dev/uinput to come ready" >> /var/run/reelbox-control.upstart
        j=0
        while [ ! -c /dev/uinput ] ; do
                j=$((j+1))
                [ $j -gt 15 ] && break
                sleep 1
        done
        Syslog "waited $j secs for /dev/uinput"

        #wait for /var to be mounted
        j=0
        while [ ! -d /var/run ] ; do
                j=$((j+1))
                [ $j -gt 15 ] && break
                sleep 1
        done
        Syslog "waited $j secs for /var"

        # Get the wakeup reason from the frontpanel
        FP=`$REELFPCTL -getwakeup`
        WAKEUP=`echo $FP | cut -f3 -d" "`
        echo "$WAKEUP" > /var/run/.reelbox.wakeup
        Syslog "wakeup reason was: $WAKEUP" 2>/dev/null
        echo "wakeup reason was: $WAKEUP" >> /var/run/reelbox-control.upstart

end script

script
    DAEMON_ARGS="-f -d /dev/frontpanel"

    . /etc/default/sysconfig

        if  [ "$USE_SERIAL_REMOTE" = "yes" ]; then
                case $SERIAL_SPEED in
                        57.600)
                                PORT_SPEED=":57600"
                                ;;
                        38.400)
                                PORT_SPEED=":38400"
                                ;;
                        19.200)
                                PORT_SPEED=":19200"
                                ;;
                        9.600)
                                PORT_SPEED=":9600"
                                ;;
                        115.200|default|*)
                                PORT_SPEED=""
                                ;;
                esac
                DAEMON_ARGS="$DAEMON_ARGS -X rs232:/dev/ttyS0$PORT_SPEED"
                #echo "DEBUG: $DAEMON_ARGS"
        fi

    if [ $USE_UDP_REMOTE_PORT = "" ] ; then
        USE_UDP_REMOTE_PORT="2003"
    fi
    #if  [ "$USE_UDP_REMOTE" = "yes" ] && [ "$USE_UDP_REMOTE_PORT" != "" ]; then
    #fi

    # UDP control always on
    DAEMON_ARGS="$DAEMON_ARGS -X udp:$USE_UDP_REMOTE_PORT"

    exec /usr/sbin/reelbox-ctrld $DAEMON_ARGS
end script

post-stop script
        . /etc/default/sysconfig
        REELFPCTL="/sbin/reelfpctl"
        case "$RUNLEVEL" in
                6)
                        #/sbin/reelfpctl -blinkled 4
                        ;;
                0)
                        $REELFPCTL -shutdown 20
                        #/sbin/reelfpctl -blinkled 4
                        ;;
        esac

        #configure WOL
        . /etc/default/sysconfig
        #REELFPCTL="/sbin/reelfpctl"
        #CAPS=$($REELFPCTL -capability)
        if=""

        if [ -e /sys/class/net/eth1 ] ; then
            #configure WOL on eth1
            if=eth1
        fi

        if grep -q ICE /dev/.frontpanel.caps ; then
            if [ "$WOL_ENABLE" = "yes" ] ; then
                /sbin/ice_wol $if
            fi
            /sbin/ice_pm
            #tell AVG power pcb to turn off mainboard power detection on AVGIII
            if grep -q AVR /dev/.frontpanel.caps ; then
                $REELFPCTL -pwrctl 0x16000000
            fi
        elif grep -q AVR /dev/.frontpanel.caps ; then
            if [ "$WOL_ENABLE" = "yes" ] ; then
                $REELFPCTL -pwrctl 13000000
            else
                $REELFPCTL -pwrctl 13000001
            fi
        fi
end script
