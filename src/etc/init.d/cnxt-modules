#! /bin/sh
### BEGIN INIT INFO
# Provides:          hdshm-modules
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Reel Multimedia Team <reelbox-devel@mailings.reelbox.org>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="Reel/Conexant HDTV drivers"
NAME="cnxt"
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="--daemon"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME



# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions
. /etc/default/globals

prepare_bla ()
{
	echo .
}


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	[ -d /dev/cnxt ] || mkdir -p /dev/cnxt

	[ -c /dev/cnxt/cnxt_gen_drv ] || mknod /dev/cnxt/cnxt_gen_drv c 254 0
	[ -c /dev/notifyq ]  || mknod /dev/notifyq c 254 1
	[ -c /dev/user_kal ] || mknod /dev/user_kal c 254 2
	[ -c /dev/iolib ]    || mknod /dev/iolib c 253 0
	[ -c /dev/rbm0 ]     || mknod /dev/rbm0 c 251 0
	[ -c /dev/rbm1 ]     || mknod /dev/rbm1 c 251 1

	modprobe cnxt_kernel_kal
	modprobe cnxt_base_drv init=0
	modprobe cnxt_lnx_drv
	modprobe iolib
	modprobe sata_cnxt
	modprobe cnxt_rbm_drv

	# enable the display
	# TODO: shall we use the resolution that is set in setup.conf?
#	( sleep 4 ; zcat /usr/share/reel/boot-client_720x576_24.ppm.gz | /usr/sbin/ppmtofb  - ) > /dev/null 2>&1 &
	( while [ ! -e /dev/fb0 ] ; do sleep 1 ; done ; zcat /usr/share/reel/boot-client_720x576_24.ppm.gz | /usr/sbin/ppmtofb - ) > /dev/null 2>&1 &
	rbmdisp 1

#Call this after bootlogo because it could stop the script:

	# The RB NetClient does not have a system clock, but
	# we have the AVR where we can get the time from.
	# I know this is not clean to do it here, but don't have
	# time to create an own script just for that task.

	# Set the system time

	fptime=0x`reelfpctl -getclock | tr -d " "`
	fptime=0x`reelfpctl -getclock | tr -d " "`
	if [ $(($fptime)) -gt 1000 ]; then
		date -s @$(($fptime)) &
	fi
}

#
# Function that stops the daemon/service
#
do_stop()
{ return 0 ;}

do_unload ()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	RETVAL=0

	#test for decypher card
	#if ! grep $REELHDPCIID /proc/bus/pci/devices ; then
	#	echo "no HD-ext found on PCI bus :("
	#	return 1
	#fi

	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	#RETVAL="$?"
	#[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	#[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	#rm -f $PIDFILE
	rmmod cnxt_rbm_drv
	rmmod sata_cnxt
	rmmod iolib
	rmmod cnxt_lnx_drv
	rmmod cnxt_base_drv
	rmmod cnxt_kernel_kal
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	#do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  unload)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_unload
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|unload|restart|force-reload}" >&2
	exit 3
	;;
esac

:
