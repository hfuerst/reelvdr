--- base_pkgs/vdr-1.3.21/tools.c	2005-02-05 11:10:30.000000000 +0100
+++ vdr-1.3.21/tools.c	2005-04-01 03:21:18.000000000 +0200
@@ -117,12 +117,32 @@
 char *strreplace(char *s, char c1, char c2)
 {
   char *p = s;
-
-  while (p && *p) {
+  if (!p)             // GA speedup
+	  return s;
+#if 0
+  while (*p) {
         if (*p == c1)
            *p = c2;
         p++;
         }
+#else
+  // GA Speedup (~20%)
+  while(1) {
+	  if (*p) {
+		  if (*p==c1)
+			  *p=c2;
+		  if (*(p+1)) {
+			  if (*(p+1)==c1)
+				  *(p+1)=c2;
+		  }
+		  else
+			  break;
+		  p+=2;
+	  }
+	  else
+		  break;
+  }
+#endif
   return s;
 }
 
@@ -143,6 +163,7 @@
   return s;
 }
 
+
 char *skipspace(const char *s)
 {
   while (*s && isspace(*s))
@@ -162,6 +183,7 @@
   return s;
 }
 
+#if 0
 char *compactspace(char *s)
 {
   if (s && *s) {
@@ -178,6 +200,31 @@
      }
   return s;
 }
+#else
+// GA Speedup
+char *compactspace(char *s)
+{
+	char *source=s;
+	char *dest=s;
+	if (s) {
+		while(*source) {
+			while(*source && *source<=' ')
+				source++;
+			while(*source) {
+				*dest++=*source;
+				if (*source<=' ')
+					break;
+				source++;
+			}
+		}
+		if (isspace(*(dest-1)))
+			*(dest-1)=0;
+		else
+			*dest=0;
+	}
+	return s;
+}
+#endif
 
 cString strescape(const char *s, const char *chars)
 {
@@ -912,6 +959,7 @@
 cListBase::cListBase(void)
 { 
   objects = lastObject = NULL;
+  count=0;
 }
 
 cListBase::~cListBase()
@@ -932,6 +980,7 @@
         objects = Object;
      lastObject = Object;
      }
+  count++;
 }
 
 void cListBase::Ins(cListObject *Object, cListObject *Before)
@@ -947,6 +996,7 @@
         lastObject = Object;
      objects = Object;
      }
+  count++;
 }
 
 void cListBase::Del(cListObject *Object, bool DeleteObject)
@@ -958,6 +1008,7 @@
   Object->Unlink();
   if (DeleteObject)
      delete Object;
+  count--;
 }
 
 void cListBase::Move(int From, int To)
@@ -997,6 +1048,7 @@
         objects = object;
         }
   objects = lastObject = NULL;
+  count=0;
 }
 
 cListObject *cListBase::Get(int Index) const
@@ -1009,6 +1061,8 @@
   return object;
 }
 
+// GA Speedup
+#if 0
 int cListBase::Count(void) const
 {
   int n = 0;
@@ -1019,7 +1073,9 @@
         object = object->Next();
         }
   return n;
+
 }
+#endif
 
 static int CompareListObjects(const void *a, const void *b)
 {
@@ -1042,7 +1098,9 @@
   objects = lastObject = NULL;
   for (i = 0; i < n; i++) {
       a[i]->Unlink();
+      count--;
       Add(a[i]);
       }
 }
 
+#include "tuning.c" // GA speedup
--- base_pkgs/vdr-1.3.21/tools.h	2005-02-12 11:17:14.000000000 +0100
+++ vdr-1.3.21/tools.h	2005-03-25 21:09:18.000000000 +0100
@@ -211,6 +211,7 @@
 protected:
   cListObject *objects, *lastObject;
   cListBase(void);
+  int count; // GA
 public:
   virtual ~cListBase();
   void Add(cListObject *Object, cListObject *After = NULL);
@@ -220,7 +221,7 @@
   void Move(cListObject *From, cListObject *To);
   virtual void Clear(void);
   cListObject *Get(int Index) const;
-  int Count(void) const;
+  int inline Count(void) const {return count;};
   void Sort(void);
   };
 
@@ -233,4 +234,6 @@
   T *Next(const T *object) const { return (T *)object->cListObject::Next(); } // avoid ambiguities in case of a "list of lists"
   };
 
+#include "tuning.h"
+
 #endif //__TOOLS_H
--- base_pkgs/vdr-1.3.21/tuning.c	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.3.21/tuning.c	2005-04-01 01:51:41.000000000 +0200
@@ -0,0 +1,95 @@
+#include "tools.h"
+#include <ctype.h>
+#include <stdlib.h>
+
+#define START_SIZE 512
+
+
+cHashObject::cHashObject(cListObject *Object, unsigned int Id)
+{
+	obj=Object;
+	id=Id;
+}
+
+cHashObject::~cHashObject()
+{
+}
+
+int cHashObject::Compare(const cListObject &ListObject) const
+{
+	cHashObject *c=(cHashObject*)&ListObject;
+	return id-c->id;
+}
+
+
+cHashBase::cHashBase(void)
+{
+	hash_table=(cList<cHashObject>**)calloc(START_SIZE,sizeof(cList<cHashObject>*));
+	size=START_SIZE;
+	count=0;
+}
+
+cHashBase::~cHashBase(void)
+{
+	int n;
+	for (n=0;n<size; n++)
+		if (hash_table[n]!=NULL)
+			delete hash_table[n];
+	free(hash_table);
+}
+
+
+void cHashBase::Add(cListObject *Object, unsigned int Id)
+{
+	unsigned int hash=hashfn(Id);
+
+	if (hash_table[hash]==NULL)
+		hash_table[hash]=new cList<cHashObject>;
+	hash_table[hash]->Add(new cHashObject(Object,Id));
+}
+
+void cHashBase::Del(cListObject *Object, unsigned int Id)
+{
+	unsigned int hash=hashfn(Id);
+	cList<cHashObject> *list;
+	cHashObject *hob;
+
+	list=hash_table[hash];
+	if (!list)
+		return;
+	for(hob=list->First(); hob; hob=list->Next(hob)) {
+		if (hob->obj==Object) {
+			list->Del(hob);
+			return;
+		}
+	}
+}
+
+cList<cHashObject> *cHashBase::GetList(unsigned int Id) const
+{
+	unsigned int hash=hashfn(Id);
+	cList<cHashObject> *list;
+
+	list=hash_table[hash];
+	return list;
+}
+
+
+cListObject *cHashBase::Get(unsigned int Id) const
+{
+	unsigned int hash=hashfn(Id);
+	cList<cHashObject> *list;
+	cHashObject *hob;
+
+	list=hash_table[hash];
+
+	if (!list)
+		return NULL;
+
+	for(hob=list->First(); hob; hob=list->Next(hob)) {
+		if (hob->id==Id) 
+			return hob->obj;
+	}
+	
+	return NULL;
+}
-- base_pkgs/vdr-1.3.21/tuning.h	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.3.21/tuning.h	2005-04-01 01:52:07.000000000 +0200
@@ -0,0 +1,32 @@
+class cHashObject : public cListObject {
+public:
+	cHashObject(cListObject *Object, unsigned int Id);
+	~cHashObject();
+	virtual int Compare(const cListObject &ListObject) const;
+
+	unsigned int id;
+	cListObject *obj;
+};
+
+
+class cHashBase {
+protected:
+	cList<cHashObject> **hash_table;
+	cHashBase(void);
+	int count,size;
+	unsigned int inline hashfn( unsigned int id) const {return id%size;};
+public:
+	virtual ~cHashBase();
+	void Add(cListObject *Object, unsigned int id);
+	void Del(cListObject *Object, unsigned int id);
+	cListObject *Get(unsigned int id) const;
+	cList<cHashObject> *GetList(unsigned int id) const;
+  };
+
+
+
+template<class T> class cHash : public cHashBase {
+public:
+	T *Get(unsigned int id) const { return (T *)cHashBase::Get(id); }
+//	T *First(cList<cHashObject> *l) const { return (T *)
+  };
