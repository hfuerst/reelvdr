diff -Nur vdr-1.3.21-vanilla/config.c vdr-1.3.21/config.c
--- vdr-1.3.21-vanilla/config.c	2005-02-05 11:43:04.000000000 +0100
+++ vdr-1.3.21/config.c	2005-07-06 14:25:33.000000000 +0200
@@ -257,6 +257,7 @@
   LnbFrequLo =  9750;
   LnbFrequHi = 10600;
   DiSEqC = 0;
+  LnbNumbers = 0;
   SetSystemTime = 0;
   TimeSource = 0;
   TimeTransponder = 0;
diff -Nur vdr-1.3.21-vanilla/config.h vdr-1.3.21/config.h
--- vdr-1.3.21-vanilla/config.h	2005-02-08 12:22:14.000000000 +0100
+++ vdr-1.3.21/config.h	2005-07-06 14:26:17.000000000 +0200
@@ -218,6 +218,7 @@
   int LnbFrequLo;
   int LnbFrequHi;
   int DiSEqC;
+  int LnbNumbers;
   int SetSystemTime;
   int TimeSource;
   int TimeTransponder;
diff -Nur vdr-1.3.21-vanilla/diseqc.c vdr-1.3.21/diseqc.c
--- vdr-1.3.21-vanilla/diseqc.c	2005-01-09 14:05:11.000000000 +0100
+++ vdr-1.3.21/diseqc.c	2005-07-06 17:10:09.000000000 +0200
@@ -7,15 +7,20 @@
  * $Id: diseqc.c 1.4 2005/01/09 13:05:11 kls Exp $
  */
 
+#include <linux/dvb/frontend.h>
+#include <sys/ioctl.h>
+#include "tools.h"
 #include "diseqc.h"
 #include <ctype.h>
 #include "sources.h"
 #include "thread.h"
+#include "dvbdevice.h"
 
 // -- cDiseqc ----------------------------------------------------------------
 
 cDiseqc::cDiseqc(void)
 {
+  satName  = NULL; 
   commands = NULL;
   parsing = false;
   numCodes = 0;
@@ -23,18 +28,32 @@
 
 cDiseqc::~cDiseqc()
 {
-  free(commands);
+  free(satName);
 }
 
+cDiseqc &cDiseqc::operator= (const cDiseqc &diseqc)
+{
+	  source = diseqc.source; 
+	  satName =  strcpyrealloc(satName,diseqc.satName);
+	  polarization = diseqc.polarization;
+	  commands =  strcpyrealloc(commands,diseqc.commands);
+	  numCodes = diseqc.numCodes;
+	  
+	  slof = diseqc.slof;
+	  lof = diseqc.lof;
+	  lnbID = diseqc.lnbID; 
+	  return *this;  
+}
+
+
 bool cDiseqc::Parse(const char *s)
 {
   bool result = false;
-  char *sourcebuf = NULL;
-  int fields = sscanf(s, "%a[^ ] %d %c %d %a[^\n]", &sourcebuf, &slof, &polarization, &lof, &commands);
+  int fields = sscanf(s, "%a[^ ] %d %c %d %a[^\n]", &satName, &slof, &polarization, &lof, &commands);
   if (fields == 4)
      commands = NULL; //XXX Apparently sscanf() doesn't work correctly if the last %a argument results in an empty string
   if (4 <= fields && fields <= 5) {
-     source = cSource::FromString(sourcebuf);
+     source = cSource::FromString(satName);
      if (Sources.Get(source)) {
         polarization = toupper(polarization);
         if (polarization == 'V' || polarization == 'H' || polarization == 'L' || polarization == 'R') {
@@ -49,9 +68,9 @@
            esyslog("ERROR: unknown polarization '%c'", polarization);
         }
      else
-        esyslog("ERROR: unknown source '%s'", sourcebuf);
+        esyslog("ERROR: unknown source '%s'", satName);
      }
-  free(sourcebuf);
+
   return result;
 }
 
@@ -122,6 +141,152 @@
   return daNone;
 }
 
+void  cDiseqc::NewDiseqc(const char *Sat, int *Source, int Type, int P, int ID, int Line)
+{
+      satName = NULL; 	
+      int of[2][2] = { { 11700,  9750 },
+		  	     { 99999, 10600 }}; 
+		
+	line = Line; 
+	type = Type;
+	source  = *Source; 
+	asprintf(&satName,"%s",Sat);
+	
+	if ((Line+1)%2){
+		  lof = of[0][0];
+		 slof = of[0][1]; 
+	}
+      else  {
+		  lof = of[1][0];
+		 slof = of[1][1];
+	}
+	  
+	SetCommands(Type, satName, slof, P, lof, ID,  Line);
+
+}
+
+
+
+cString cDiseqc::ToText(const cDiseqc *Diseqc)
+{
+/* Syntax: 	 single LNB  		| mini | all    	  	full 		          mini 		  mini 	 
+ *   | S19.2E  | 11700 |  V  | 9750 |   t  |   v  | W15  | [E0 10 38 F0] | W15  |   A   |  W15  | t
+ *   | SatCode | SLOF  | POL | LOF  | tone | volt | Wait |  diseqc code  | Wait | MinAB |  Wait | tone 
+ *   |
+ * 1.|   --    |  low  |  V  |  low |  x   |  13  |  x   | [E0 10 38 x ]  | x    |   x   | t     
+ * 2.|   --    |   hi  |  V  |  hi  |  x   |  13  |  x   | [E0 10 38 x+1] | x    |   x   | T    
+ * 3.|   --    |  low  |  H  |  low |  x   |  18  |  x   | [E0 10 38 x+2] | x    |   x   | t    
+ * 3.|   --    |   hi  |  H  |  hi  |  x   |  18  |  x   | [E0 10 38 x+3] | x    |   x   | T    
+ */
+
+ char *s, fullString[60] ;
+ 
+ 	s = fullString; 
+	 
+ 	s += sprintf(s,"%s  %5d ", Diseqc->satName,Diseqc->slof);  
+	s += sprintf(s,"%c  %5d ", Diseqc->polarization,Diseqc->lof);  
+	s += sprintf(s,"%s",Diseqc->commands);	
+	s += sprintf(s,"\n");
+ *s = 0; 
+
+
+ return cString(fullString,false);  
+}
+
+void cDiseqc::SetSatName(const char *SatName)
+{
+	  if (!strcmp(satName,SatName))
+	       dsyslog("changing LNB  to  %s  ", SatName);
+
+		satName = strcpyrealloc(satName,SatName) ; 
+		Diseqcs.SetModified(true);
+}
+
+void cDiseqc::SetSlof(int Slof)
+{
+	slof = Slof; 
+	Diseqcs.SetModified(true);
+}
+
+void cDiseqc::SetLof(int Lof)
+{
+	lof = Lof; 
+	Diseqcs.SetModified(true);
+}
+
+void cDiseqc::SetPolarization(const char Polarization)
+{
+	  polarization = Polarization; 
+	Diseqcs.SetModified(true);
+
+}
+
+void cDiseqc::SetID(int LnbID)
+{
+	lnbID = static_cast<ID> (A +LnbID); 
+	Diseqcs.SetModified(true);
+}
+
+void cDiseqc::SetCommands(int Type, char *SatName, int slof, int P, int lof, int ID, int Line){
+
+	SetID(ID); 
+	char pol = P? 'H': 'V';   
+	char ab =(ID+1)%2? 'A' : 'B';   
+      char *buffer = NULL; 	
+
+	if(Type == FFAST){
+		  asprintf(&buffer,"%s %5d %c %5d [E0 10 38 F%X]", SatName, slof, pol, lof,Line);
+	}
+      else {
+		asprintf(&buffer,"%s %5d %c %5d t %c W15", SatName, slof, pol, lof, P?'V':'v');
+		if(Type == FULL)
+		   asprintf(&buffer,"%s [E0 10 38 F%X]",buffer,line);
+		asprintf(&buffer,"%s W15 %c W15 %c",buffer, ab, Line%2?'T':'t');
+	 }	
+		  
+	Parse(buffer);
+}
+
+void cDiseqc::SetCommands(int Type, char *SatName, int P, int ID, int Line){
+
+	SetID(ID); 
+	char pol = P? 'H': 'V';  
+      char *buffer = NULL; 	
+
+	char ab =(ID+1)%2? 'A' : 'B';   
+	
+	if ((Line+1) % 2){
+		 lof =   9750; 
+		 slof = 11700;
+	}
+      else  {
+		 lof =  10600;
+		 slof = 99999;
+	}
+	if(Type == FFAST){
+		  asprintf(&buffer,"%s %5d %c %5d [E0 10 38 F%X]", SatName, slof, pol, lof,Line);
+	}
+      else {
+		asprintf(&buffer,"%s %5d %c %5d t %c W15", SatName, slof, pol, lof, P?'V':'v');
+		if(Type == FULL)
+		   asprintf(&buffer,"%s [E0 10 38 F%X]",buffer,Line);
+		asprintf(&buffer,"%s W15 %c W15 %c",buffer, ab, Line%2?'T':'t');
+	 }	
+
+	Parse(buffer);
+}
+
+cString cDiseqc::ToText(void)
+{
+	    return ToText(this);
+}
+
+bool cDiseqc::Save(FILE *f)  
+{
+	return fprintf(f, "%s", *ToText()) > 0;
+}
+
+
 // -- cDiseqcs ---------------------------------------------------------------
 
 cDiseqcs Diseqcs;
@@ -134,3 +299,77 @@
       }
   return NULL;
 }
+
+bool cDiseqcs::Load(const char *FileName, bool AllowComments, bool MustExist)
+{
+	  if (cConfig<cDiseqc>::Load(FileName, AllowComments, MustExist)) {
+		    ReNumber(); 
+		return true;
+	  }
+	  return false;
+}
+
+
+void cDiseqcs::ReNumber(void)
+{
+ int id = 0, line = 0; 
+ for(cDiseqc *diseqc = First(); diseqc; diseqc = Next(diseqc)){
+	   
+    diseqc->SetLine(line); 
+    diseqc->SetID(id); 
+    if (!((line+1)%4)) id++;  // 4 Lines == 1 LNB
+
+    line++; 
+ }
+}
+
+
+cDiseqc *cDiseqcs::Get(const char *SatName)
+{
+  for (cDiseqc *p = First(); p; p = Next(p)) {
+	  if (!(strcmp(p->SatName(),SatName)));
+        return p;
+      }
+  return NULL;
+}
+
+
+cDiseqc *cDiseqcs::Get(int Line)
+{
+  for (cDiseqc *p = First(); p; p = Next(p)) {
+	  if (p->Line() ==  Line);
+        return p;
+      }
+  return NULL;
+}
+
+
+void cDiseqcs::SetModified(bool ByUser)
+{
+	modified = ByUser ? DISEQCMOD_USER : !modified ? DISEQCMOD_FILE : modified;
+}
+
+
+int cDiseqcs::Modified(void)
+{
+	  int Result = modified;
+	  modified = DISEQCSMOD_NONE;
+	  return Result;
+}
+
+bool cDiseqcs::IsUnique(int *Src, int Lnbs){
+	   
+  for(int i = 0; i<Lnbs*4; i+=4){
+    int k = i+4;
+    while (k < Lnbs*4){
+	if( Src[i] == Src[k]){
+	  return false; 
+	}
+	k+=4;
+    }
+ }
+  return true; 
+	  
+}
+
+
diff -Nur vdr-1.3.21-vanilla/diseqc.h vdr-1.3.21/diseqc.h
--- vdr-1.3.21-vanilla/diseqc.h	2002-12-07 14:54:02.000000000 +0100
+++ vdr-1.3.21/diseqc.h	2005-07-06 17:12:37.000000000 +0200
@@ -12,7 +12,19 @@
 
 #include "config.h"
 
+#define MINI  1
+#define FULL  2 
+#define FFAST 3
+#define MAXLNBS 4
+
+#define DISEQCMOD_NONE 0
+#define DISEQCMOD_FILE 1
+#define DISEQCMOD_USER 2
+
+#define DISEQCSMOD_NONE 0
+
 class cDiseqc : public cListObject {
+  friend class cMenuSetupLNB;
 public:
   enum eDiseqcActions {
     daNone,
@@ -26,19 +38,30 @@
     };
   enum { MaxDiseqcCodes = 6 };
 private:
+  static cString ToText(const cDiseqc *Diseqc);  
+  enum ID {A=65, B, C, D, E, F, G, H} lnbID;  
+  int line; 
+  int type;   
+  char *satName;
   int source;
   int slof;
-  char polarization;
   int lof;
+  char polarization;
   char *commands;
   bool parsing;
+  cString ToText(const cDiseqc diseqc);
   uchar codes[MaxDiseqcCodes];
   int numCodes;
   char *Wait(char *s);
   char *Codes(char *s);
 public:
   cDiseqc(void);
+  cDiseqc(const cDiseqc &diseqc);
   ~cDiseqc();
+  cDiseqc &operator=(const cDiseqc &diseqc);
+  void NewDiseqc(const char *satName, int *source,int type, int pol, int id, int line);
+  cString ToText(void);
+  bool Save(FILE *f);
   bool Parse(const char *s);
   eDiseqcActions Execute(char **CurrentAction);
       // Parses the DiSEqC commands and returns the appropriate action code
@@ -48,17 +71,47 @@
       // it. Call Execute() repeatedly (always providing the same CurrentAction pointer)
       // until it returns daNone. After a successful execution of all commands
       // *CurrentAction points to the value 0x00.
+  char *SatName(void) const { return satName; } 
+  int NumCodes(void) const { return numCodes; } 
+  int Line(void) const { return line; }; 
+  int Type(void) const { return type;   };     
+  int LnbID(void) const { return lnbID; } 
   int Source(void) const { return source; }
   int Slof(void) const { return slof; }
   char Polarization(void) const { return polarization; }
   int Lof(void) const { return lof; }
   const char *Commands(void) const { return commands; }
+
   uchar *Codes(int &NumCodes) { NumCodes = numCodes; return numCodes ? codes : NULL; }
+  void SetSatName(const char *sat); 
+  void SetSlof(int slof); 
+  void SetLof(int lof);
+  void SetID(int lnbID); 
+  void SetLine(int Line)  { line = Line; }; 
+  void SetType(int Type) {type = Type; }; 
+  void SetPolarization(char polar); 
+  void SetCommands(int type, char *satName, int slof, int pol, int lof, int id, int line);
+  void SetCommands(int type, char *satName, int pol, int id, int line);
   };
 
+
+// --- cDiseqcs ----------------------------------------------- 
 class cDiseqcs : public cConfig<cDiseqc> {
+
+  int lines; // total numbers of lines 
+  int modified; 
+
 public:
+	
+  bool Load(const char *FileName, bool AllowComments = false, bool MustExist = false);
+  void ReNumber(void);  
   cDiseqc *Get(int Source, int Frequency, char Polarization);
+  cDiseqc *Get(const char *satName); 
+  cDiseqc *Get(int line);
+  cDiseqc *Get(void);  
+  int Modified(void);
+  void SetModified(bool);
+  bool IsUnique(int *src, int lnbs);
   };
 
 extern cDiseqcs Diseqcs;
diff -Nur vdr-1.3.21-vanilla/dvbdevice.c vdr-1.3.21/dvbdevice.c
--- vdr-1.3.21-vanilla/dvbdevice.c	2005-02-13 15:26:37.000000000 +0100
+++ vdr-1.3.21/dvbdevice.c	2005-07-06 14:00:36.000000000 +0200
@@ -84,11 +84,12 @@
   cCondVar locked;
   cCondWait newSet;
   bool GetFrontendEvent(dvb_frontend_event &Event, int TimeoutMs = 0);
-  bool SetFrontend(void);
+  //bool SetFrontend(void);
   virtual void Action(void);
 public:
   cDvbTuner(int Fd_Frontend, int CardIndex, fe_type_t FrontendType, cCiHandler *CiHandler);
   virtual ~cDvbTuner();
+  bool SetFrontend(void);
   bool IsTunedTo(const cChannel *Channel) const;
   void Set(const cChannel *Channel, bool Tune, bool UseCa);
   bool Locked(int TimeoutMs = 0);
diff -Nur vdr-1.3.21-vanilla/menu.c vdr-1.3.21/menu.c
--- vdr-1.3.21-vanilla/menu.c	2005-02-06 12:33:13.000000000 +0100
+++ vdr-1.3.21/menu.c	2005-07-06 17:19:49.000000000 +0200
@@ -29,6 +29,8 @@
 #include "timers.h"
 #include "transfer.h"
 #include "videodir.h"
+#include "diseqc.h"
+#include "dvbdevice.h"
 
 #define MENUTIMEOUT     120 // seconds
 #define MAXWAIT4EPGINFO   3 // seconds
@@ -1188,8 +1190,8 @@
                               if (channel)
                                  ChannelNr = channel->Number();
                               }
-                           now = true;
-                           return AddSubMenu(new cMenuWhatsOn(schedules, true, ChannelNr));
+                              now = true;
+                              return AddSubMenu(new cMenuWhatsOn(schedules, true, ChannelNr));
                            }
                         now = !now;
                         next = !next;
@@ -1205,8 +1207,8 @@
                         return AddSubMenu(new cMenuEvent(((cMenuScheduleItem *)Get(Current()))->event, otherChannel));
                      break;
        default:      break;
-       }
      }
+  }
   else if (!HasSubMenu()) {
      now = next = false;
      const cEvent *ei = cMenuWhatsOn::ScheduleEvent();
@@ -1812,7 +1814,7 @@
            themeIndex = d ? themes.GetThemeIndex(d) : 0;
         free(d);
         }
-     
+
      Set();
      Setup.OSDLanguage = OriginalOSDLanguage;
      }
@@ -1907,7 +1909,6 @@
      }
   return state;
 }
-
 // --- cMenuSetupDVB ---------------------------------------------------------
 
 class cMenuSetupDVB : public cMenuSetupBase {
@@ -1995,6 +1996,21 @@
 class cMenuSetupLNB : public cMenuSetupBase {
 private:
   void Setup(void);
+
+  cSource *source;
+  cDiseqc *diseqc;
+  //cDiseqc aData[MAXLNBS*4];
+  int tmpSource[MAXLNBS*4];
+
+  int lofStat;
+  const char *useDiSEqcTexts[4];
+  const char *lofTexts[5];
+  bool diseqcConfRead;
+  int diseqObjNumber;
+  int lnbNumber;
+  int currentchannel;
+
+
 public:
   cMenuSetupLNB(void);
   virtual eOSState ProcessKey(eKeys Key);
@@ -2002,34 +2018,172 @@
 
 cMenuSetupLNB::cMenuSetupLNB(void)
 {
-  SetSection(tr("LNB"));
+  lofStat = 0;
+  diseqcConfRead = false;
+  int initSource[] = {35008, 34946, 35031, 35098};
+
+  diseqc = 0;
+  diseqObjNumber = 0;
+  for(diseqc = Diseqcs.First(); diseqc; diseqc = Diseqcs.Next(diseqc)){
+      tmpSource[diseqObjNumber] = diseqc->Source();
+      diseqObjNumber++;
+  }
+  for (int i = diseqObjNumber ; i < MAXLNBS*4; i+=4){
+      tmpSource[i] = initSource[i/4];
+  }
+
+  ::Setup.LnbNumbers =  lnbNumber = diseqObjNumber /4;
+  currentchannel = cDevice::CurrentChannel();
+
+  SetSection(tr("DiSEqC"));
+
   Setup();
 }
 
 void cMenuSetupLNB::Setup(void)
 {
   int current = Current();
+  const int MINLNBS = 2;
+
+  if(data.DiSEqC == -1){
+  }
+
+  useDiSEqcTexts [0] = "None / Single LNB";
+  useDiSEqcTexts [1] = "mini DiSEqC";
+  useDiSEqcTexts [2] = "Full DiSEqC";
+  useDiSEqcTexts [3] = "Full Fast DiSEqC";
+
+  lofTexts [0] = "10.6/9.75 GHz EURO Univ. LNB";
+  lofTexts [1] = "11.25/10.75 GHz N. America Univ. LNB";
 
   Clear();
 
-  Add(new cMenuEditBoolItem(tr("Setup.LNB$Use DiSEqC"),               &data.DiSEqC));
-  if (!data.DiSEqC) {
-     Add(new cMenuEditIntItem( tr("Setup.LNB$SLOF (MHz)"),               &data.LnbSLOF));
-     Add(new cMenuEditIntItem( tr("Setup.LNB$Low LNB frequency (MHz)"),  &data.LnbFrequLo));
-     Add(new cMenuEditIntItem( tr("Setup.LNB$High LNB frequency (MHz)"), &data.LnbFrequHi));
-     }
+  int i;
+  char buffer[16];
+  char LnbC = 'A';
+
+  Add(new cMenuEditStraItem(tr("DiSEqC Type"), &data.DiSEqC, 4, useDiSEqcTexts));
+  switch (data.DiSEqC){
+      case 0 :    // none DiSEqC
+                  Add(new cMenuEditStraItem(tr("LNB Type"), &lofStat, 2, lofTexts));
+                  break;
+      case 1 :    // mini DiSEqC
+                  Add(new cMenuEditStraItem(tr("LNB Type"), &lofStat, 2, lofTexts));
+                  lnbNumber = 2;
+                  for (i=0; i < lnbNumber ;i++){
+                     snprintf(buffer, sizeof(buffer), "LNB %c",LnbC+i);
+                  Add(new cMenuEditSrcItem (buffer, &tmpSource[i*4]));
+                  }
+                  break;
 
+                  // Full DiSEqC  2,4,8  with waits
+      case 2 :
+                  Add(new cMenuEditStraItem(tr("LNB Type"), &lofStat, 2, lofTexts));
+                  Add(new cMenuEditIntItem(tr("Numbers of LNB"), &lnbNumber,MINLNBS,MAXLNBS));
+                  for (i=0; i < lnbNumber;i++){
+                      snprintf(buffer, sizeof(buffer), "LNB %c",LnbC+i);
+                      Add(new cMenuEditSrcItem (buffer, &tmpSource[i*4]));
+                  }
+                  break;
+      case 3 :    // Full Fast DiSEqC  (ohne waits)
+                  Add(new cMenuEditStraItem(tr("LNB Type"), &lofStat, 2, lofTexts));
+                  Add(new cMenuEditIntItem(tr("Numbers of LNB"), &lnbNumber,MINLNBS,MAXLNBS));
+                  for (i=0;i < lnbNumber;i++){
+                         snprintf(buffer, sizeof(buffer), "LNB %c",LnbC+i);
+                         Add(new cMenuEditSrcItem (buffer, &tmpSource[i*4]));
+                  }
+                  break;
+  }
   SetCurrent(Get(current));
   Display();
 }
 
 eOSState cMenuSetupLNB::ProcessKey(eKeys Key)
 {
-  int oldDiSEqC = data.DiSEqC;
+  int oldlnbNumber = ::Setup.LnbNumbers;
+  int oldDiSEqC =  ::Setup.DiSEqC;
+  int oldLofStat = ::Setup.LnbFrequHi == 10600 ? 0 : 1;
+  int oldSource[MAXLNBS];
+
+  for (int i = 0;i< lnbNumber; i++){
+            oldSource[i] =  tmpSource[i*4];
+  }
   eOSState state = cMenuSetupBase::ProcessKey(Key);
 
-  if (Key != kNone && data.DiSEqC != oldDiSEqC)
-     Setup();
+  if(Key == kOk){
+      if (data.DiSEqC == 0){
+          if (oldLofStat != lofStat){
+               if (lofStat){
+                   ::Setup.LnbFrequHi = 10600;
+                   ::Setup.LnbFrequLo = 9750;
+               }
+               else {
+                    ::Setup.LnbFrequHi = 11250;
+                    ::Setup.LnbFrequLo = 10750;
+               }
+          }
+          // delete all diseqc objects
+          for (int i = 0  ;i < diseqObjNumber ;i++){
+               Diseqcs.Del(Diseqcs.Get(i));
+          }
+       }
+       else {
+           // delete  unused Diseqc Objects
+           if ( lnbNumber < oldlnbNumber){
+               for (int i = lnbNumber*4  ;i< diseqObjNumber ;i++){
+                   Diseqcs.Del(Diseqcs.Get(i));
+               }
+           }
+           //change old diseqc Objects
+           int id = 0 ,line = 0, p = 0;
+           diseqc = 0 ;
+           char *satname;
+           for(diseqc=Diseqcs.First(); diseqc; diseqc = Diseqcs.Next(diseqc)){
+               asprintf(&satname,*cSource::ToString(tmpSource[id*4]));
+               diseqc->SetCommands(data.DiSEqC,satname, p, id, line);
+               if ((line)%2) p = p ? 0 : 1;  // polarization bit
+                   line++;
+                   if (!(line%4)) id++;            // ID counter every 4rth line
+           }
+           // Add diseqc Objects if required
+           if  (lnbNumber > oldlnbNumber  ){
+                int newObjects;
+                oldlnbNumber == 1 ? newObjects  = lnbNumber*4  : newObjects = (lnbNumber - oldlnbNumber) *4 ;
+                int *newSource = NULL, k = 0, p = 0 ;
+                char *buffer = NULL;
+                for (int line = diseqObjNumber; line < (diseqObjNumber + (newObjects)); line++){
+                     cDiseqc *d = new cDiseqc;
+                     if(!(line% 4)){
+                          asprintf(&buffer,"%s",*cSource::ToString(tmpSource[line]));
+                          newSource = &tmpSource[line];
+                          k++;
+                     }
+                     d->NewDiseqc(buffer,newSource,data.DiSEqC, p, k, line);
+                     Diseqcs.Add(d);
+                     if((line)%2) p = p ? 0 : 1;
+                 }
+            }
+       }
+       ::Setup.LnbNumbers =  lnbNumber;
+       ::Setup.DiSEqC= data.DiSEqC;
+           if (Diseqcs.IsUnique(tmpSource, lnbNumber)){
+	       Diseqcs.SetModified(true);
+               if (data.DiSEqC){
+                    Diseqcs.Save();
+                    Channels.SwitchTo(currentchannel+9);
+                    Channels.SwitchTo(currentchannel);
+               }
+               state = osBack;
+            }
+            else {
+                Skins.Message(mtError, tr("Sat positions must be unique!\n"));
+                state = osContinue ;
+            }
+  }
+  if ((Key != kNone) && ( data.DiSEqC != oldDiSEqC ||
+               lnbNumber != oldlnbNumber || lofStat != oldLofStat )) {
+         Setup();
+  }
   return state;
 }
 
@@ -2749,6 +2903,7 @@
     //TODO
     //XXX case kGreen:  return osEventNow;
     //XXX case kYellow: return osEventNext;
+    case kYellow: return osEnd;
     case kOk:     if (group >= 0) {
                      channel = Channels.Get(Channels.GetNextNormal(group));
                      if (channel)
diff -Nur vdr-1.3.21-vanilla/menuitems.c vdr-1.3.21/menuitems.c
--- vdr-1.3.21-vanilla/menuitems.c	2004-11-21 14:24:10.000000000 +0100
+++ vdr-1.3.21/menuitems.c	2005-07-06 14:00:36.000000000 +0200
@@ -97,6 +97,62 @@
   return state;
 }
 
+// --- cMenuEditLnbIntItem ------------------------------------------------------
+
+cMenuEditLnbIntItem::cMenuEditLnbIntItem(const char *Name, int *Value, int Min, int Max)
+:cMenuEditItem(Name)   
+{
+  value = Value;
+  min = Min;
+  max = Max;
+  Set();
+}
+
+void cMenuEditLnbIntItem::Set(void)
+{
+  char buf[3];
+  snprintf(buf, sizeof(buf), "%d", *value);
+  SetValue(buf);
+}
+
+eOSState cMenuEditLnbIntItem::ProcessKey(eKeys Key)
+{
+  eOSState state = cMenuEditItem::ProcessKey(Key);
+
+  if (state == osUnknown) {
+     int newValue = *value;
+     Key = NORMALKEY(Key);
+     switch (Key) {
+       case kNone: break;
+	 case k0 ... k9: 
+            if (fresh) {
+               *value = 0;
+               fresh = false;
+               }
+            break;
+       case kLeft: 
+		newValue >>= 0x1;
+            fresh = true;
+            break;
+       case kRight:
+		  newValue <<=  0x1;
+            fresh = true;
+            break;
+       default:
+            if (*value < min) { *value = min; Set(); }
+            if (*value > max) { *value = max; Set(); }
+            return state;
+       }
+     if ((!fresh || min <= newValue) && newValue <= max) {
+        *value = newValue;
+        Set();
+        }
+     state = osContinue;
+     }
+  return state;
+}
+
+
 // --- cMenuEditBoolItem -----------------------------------------------------
 
 cMenuEditBoolItem::cMenuEditBoolItem(const char *Name, int *Value, const char *FalseString, const char *TrueString)
@@ -774,7 +830,7 @@
 // --- cMenuSetupPage --------------------------------------------------------
 
 cMenuSetupPage::cMenuSetupPage(void)
-:cOsdMenu("", 33)
+:cOsdMenu("", 30)
 {
   plugin = NULL;
 }
diff -Nur vdr-1.3.21-vanilla/menuitems.h vdr-1.3.21/menuitems.h
--- vdr-1.3.21-vanilla/menuitems.h	2004-11-21 14:23:00.000000000 +0100
+++ vdr-1.3.21/menuitems.h	2005-07-06 14:00:36.000000000 +0200
@@ -34,6 +34,18 @@
   virtual eOSState ProcessKey(eKeys Key);
   };
 
+
+class cMenuEditLnbIntItem : public cMenuEditItem {
+  protected:
+    int *value;
+    int min, max;
+    virtual void Set(void);
+  public:
+    cMenuEditLnbIntItem(const char *Name, int *Value, int Min = 2, int Max = INT_MAX);
+    virtual eOSState ProcessKey(eKeys Key);
+};
+
+
 class cMenuEditBoolItem : public cMenuEditIntItem {
 protected:
   const char *falseString, *trueString;
