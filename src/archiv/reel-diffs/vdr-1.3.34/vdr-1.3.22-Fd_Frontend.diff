Common subdirectories: vdr-1.3.22/PLUGINS and vdr-1.3.22.patch/PLUGINS
diff -uNbw vdr-1.3.22/dvbdevice.c vdr-1.3.22.patch/dvbdevice.c
--- vdr-1.3.22/dvbdevice.c	2005-02-20 14:35:28.000000000 +0100
+++ vdr-1.3.22.patch/dvbdevice.c	2005-03-18 12:48:52.000000000 +0100
@@ -346,6 +346,7 @@
 // --- cDvbDevice ------------------------------------------------------------
 
 int cDvbDevice::devVideoOffset = -1;
+int cDvbDevice::fd_frontend[MAXDVBDEVICES];
 bool cDvbDevice::setTransferModeForDolbyDigital = true;
 
 cDvbDevice::cDvbDevice(int n)
@@ -358,7 +359,7 @@
 
   // Devices that are present on all card types:
 
-  int fd_frontend = DvbOpen(DEV_DVB_FRONTEND, n, O_RDWR | O_NONBLOCK);
+  fd_frontend[n] = DvbOpen(DEV_DVB_FRONTEND, n, O_RDWR | O_NONBLOCK);
 
   // Devices that are only present on cards with decoders:
 
@@ -406,12 +407,12 @@
 
   // We only check the devices that must be present - the others will be checked before accessing them://XXX
 
-  if (fd_frontend >= 0) {
+  if (fd_frontend[n] >= 0) {
      dvb_frontend_info feinfo;
-     if (ioctl(fd_frontend, FE_GET_INFO, &feinfo) >= 0) {
+     if (ioctl(fd_frontend[n], FE_GET_INFO, &feinfo) >= 0) {
         frontendType = feinfo.type;
         ciHandler = cCiHandler::CreateCiHandler(*cDvbName(DEV_DVB_CA, n));
-        dvbTuner = new cDvbTuner(fd_frontend, CardIndex(), frontendType, ciHandler);
+        dvbTuner = new cDvbTuner(fd_frontend[n], CardIndex(), frontendType, ciHandler);
         }
      else
         LOG_ERROR;
@@ -458,8 +459,11 @@
             found++;
             }
          else
+            { 
+              fd_frontend[i]=-1;  
             break;
          }
+         }
       else
          NextCardIndex(1); // skips this one
       }
diff -uNbw vdr-1.3.22/dvbdevice.h vdr-1.3.22.patch/dvbdevice.h
--- vdr-1.3.22/dvbdevice.h	2005-02-20 12:17:07.000000000 +0100
+++ vdr-1.3.22.patch/dvbdevice.h	2005-03-18 12:46:28.000000000 +0100
@@ -25,6 +25,7 @@
 
 /// The cDvbDevice implements a DVB device which can be accessed through the Linux DVB driver API.
 
+#define ROTORFRONTENDPATCH
 class cDvbDevice : public cDevice {
 private:
   static bool Probe(const char *FileName);
@@ -35,6 +36,7 @@
          ///< Must be called before accessing any DVB functions.
          ///< \return True if any devices are available.
 private:
+  static int fd_frontend[MAXDVBDEVICES];
   fe_type_t frontendType;
   int fd_osd, fd_audio, fd_video, fd_dvr, fd_stc;
 protected:
@@ -44,6 +46,7 @@
   virtual ~cDvbDevice();
   virtual int ProvidesCa(const cChannel *Channel) const;
   virtual bool HasDecoder(void) const;
+  static int Fd_Frontend(int Index) {return fd_frontend[Index];};
 
 // SPU facilities
 
Common subdirectories: vdr-1.3.22/libsi and vdr-1.3.22.patch/libsi
Common subdirectories: vdr-1.3.22/symbols and vdr-1.3.22.patch/symbols
