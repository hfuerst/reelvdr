diff -urN vcd-0.7.orig/mediaservice.h vcd-0.7/mediaservice.h
--- vcd-0.7.orig/mediaservice.h	1970-01-01 01:00:00.000000000 +0100
+++ vcd-0.7/mediaservice.h	2007-04-12 18:31:02.000000000 +0200
@@ -0,0 +1,86 @@
+#ifndef _MEDIA_SERVICE_H
+#define _MEDIA_SERVICE_H
+
+#include <vdr/plugin.h>
+
+/* flags for MediaManager_Status_v1_0 */
+#define MEDIA_STATUS_REPLAY 	0x01
+#define MEDIA_STATUS_EJECTDISC	0x02
+#define MEDIA_STATUS_ACTIVE 	0x04
+#define MEDIA_STATUS_CRASHED	0x08
+
+#define MEDIA_MANAGER_REGISTER_ID	"MediaManager-Register-v1.0"
+#define MEDIA_MANAGER_ACTIVATE_ID	"MediaManager-Activate-v1.0"
+#define MEDIA_MANAGER_MAINMENU_ID	"MediaManager-Mainmenu-v1.0"
+#define MEDIA_MANAGER_STATUS_ID 	"MediaManager-Status-v1.0"
+#define MEDIA_MANAGER_SUSPEND_ID	"MediaManager-Suspend-v1.0"
+#define MEDIA_MANAGER_PLUGIN		"mediamanager"
+
+enum eMediaType {
+	mtInvalid	= -1,
+	mtNoDisc	= 0,
+	mtBlank 	= 1,
+	mtAudio 	= 2,
+	mtVideoDvd	= 3,
+	mtSvcd		= 4,
+	mtVcd		= 5,
+	mtData		= 6,
+	mtVDRdata	= 7,
+	mtAudioData	= 8,
+	mtImageData = 9,
+	mtExternUse = 10
+};
+
+struct MediaManager_Register_v1_0 {
+	const char *PluginName;
+	const char *MainMenuEntry;
+	const char *Description;
+	eMediaType mediatype;
+	bool shouldmount;
+};
+
+struct MediaManager_Status_v1_0 {
+	bool set;
+	int flags;
+	bool isreplaying;
+	bool ejectdisc;
+	bool active;		/* read only */
+	bool crashed;
+};
+
+struct MediaManager_Activate_v1_0 {
+	bool on;
+	const char *device_file;
+	const char *mount_point;
+};
+
+struct MediaManager_Mainmenu_v1_0 {
+	cOsdObject *mainmenu;
+};
+
+struct MediaManager_Suspend_v1_0 {
+	const char *PluginName;
+	bool suspend;
+};
+
+class cMediaService {
+  private:
+	static cPlugin *manager;
+	static bool active;
+	static bool replaying;
+	static char *myname;
+  public:
+	cMediaService(const char *MyName);
+	~cMediaService(void);
+
+	void SetManager(cPlugin *Manager);
+
+	static bool HaveManager(void);
+	static void SetReplaying(bool Replaying);
+	static void SetActive(bool Active);
+	static bool IsReplaying(void);
+	static bool IsActive(void);
+	static void EjectDisc(void);
+	static void Suspend(bool Suspend);
+};
+#endif
diff -urN vcd-0.7.orig/menu.c vcd-0.7/menu.c
--- vcd-0.7.orig/menu.c	2005-01-26 22:18:42.000000000 +0100
+++ vcd-0.7/menu.c	2007-04-06 17:27:13.000000000 +0200
@@ -20,7 +20,7 @@
 #include "functions.h"
 #include "setup.h"
 #include "menucontrol.h"
-
+#include "mediaservice.h"
 
 
 // --- cMenu -----------------------------------------------------------------
@@ -65,10 +65,12 @@
 eOSState cMenu::Eject(void)
 {
   if (vcd->DiscOk()) {
+     cMediaService::Suspend(true);
      dsyslog("VCD: Eject");
      memset(&(vcd->vcdEntries), 0, sizeof(vcd->vcdEntries));
      vcd->Eject();
      vcd->Close();
+     cMediaService::Suspend(false);
      return osStopReplay;
      }
   return osContinue;
diff -urN vcd-0.7.orig/menucontrol.c vcd-0.7/menucontrol.c
--- vcd-0.7.orig/menucontrol.c	2005-01-28 16:06:48.000000000 +0100
+++ vcd-0.7/menucontrol.c	2007-04-06 16:17:27.000000000 +0200
@@ -20,7 +20,7 @@
 #include "functions.h"
 #include "setup.h"
 #include "menucontrol.h"
-
+#include "mediaservice.h"
 
 #define MODETIMEOUT       3 // seconds
 
@@ -39,8 +39,13 @@
 
 cMenuSpiControl::~cMenuSpiControl()
 {
+#if VDRVERSNUM >= 10338
+  cStatus::MsgReplaying(this, NULL, NULL, false);
+#else
   cStatus::MsgReplaying(this, NULL);
+#endif
   Stop();
+  cMediaService::Suspend(false);
 }
 
 void cMenuSpiControl::SetItem(int Spi, cVcd *Vcd)
@@ -118,14 +123,24 @@
   lastSpeed = -1;
   timeoutShow = 0;
   timeSearchActive = false;
+#if VDRVERSNUM >= 10338
+  cStatus::MsgReplaying(this, "VCD", NULL, true);
+#else
   cStatus::MsgReplaying(this, "VCD");
+#endif
+  cMediaService::Suspend(true);
 }
 
 cMenuVcdControl::~cMenuVcdControl()
 {
   Hide();
+#if VDRVERSNUM >= 10338
+  cStatus::MsgReplaying(this, NULL, NULL, false);
+#else
   cStatus::MsgReplaying(this, NULL);
+#endif
   Stop();
+  cMediaService::Suspend(false);
 }
 
 void cMenuVcdControl::SetTrack(int Track, cVcd *Vcd)
diff -urN vcd-0.7.orig/player.c vcd-0.7/player.c
--- vcd-0.7.orig/player.c	2005-01-28 19:36:45.000000000 +0100
+++ vcd-0.7/player.c	2007-04-06 16:06:55.000000000 +0200
@@ -610,6 +610,11 @@
         done = true;
      }
  
+  if (count == -1) {
+     done = true;
+     return 0;
+     }
+
   if (count > 0 &&
       buffer[0] == 0x00 && buffer[1] == 0x00 && buffer[2] == 0x01 &&
       buffer[3] == PACK_SC) {
@@ -801,6 +806,10 @@
         dsyslog("VCD: autowait %d sec", autoWait);
         }
      }
+  else {
+     dsyslog("VCD: read error");
+     return -1;
+     }
 
   return 0;
 }
diff -urN vcd-0.7.orig/psdcontrol.c vcd-0.7/psdcontrol.c
--- vcd-0.7.orig/psdcontrol.c	2005-01-28 20:15:14.000000000 +0100
+++ vcd-0.7/psdcontrol.c	2007-04-06 16:20:59.000000000 +0200
@@ -20,6 +20,7 @@
 #include "functions.h"
 #include "setup.h"
 #include "psdcontrol.h"
+#include "mediaservice.h"
 
 #define GOTO_SELF         (psdVcd->header==PLAY_LIST_HEADER \
                           ?  U16_TO_LE(vcd->vcdLot.list_id_offset[U16_TO_LE(psdVcd->play.list_id)]) \
@@ -84,7 +85,12 @@
  
 cPsdSpiControl::~cPsdSpiControl()
 {
+#if VDRVERSNUM >= 10338
+  cStatus::MsgReplaying(this, NULL, NULL, false);
+#else
   cStatus::MsgReplaying(this, NULL);
+#endif
+  cMediaService::Suspend(false);
 }
 
 void cPsdSpiControl::SetItem(int Spi, cVcd *Vcd, union psd_vcd *PsdVcd)
@@ -252,7 +258,12 @@
 
 cPsdVcdControl::~cPsdVcdControl()
 {
+#if VDRVERSNUM >= 10338
+  cStatus::MsgReplaying(this, NULL, NULL, false);
+#else
   cStatus::MsgReplaying(this, NULL);
+#endif
+  cMediaService::Suspend(false);
 }
 
 void cPsdVcdControl::SetTrack(int Track, cVcd *Vcd, union psd_vcd *PsdVcd)
diff -urN vcd-0.7.orig/vcd.c vcd-0.7/vcd.c
--- vcd-0.7.orig/vcd.c	2005-01-26 22:27:47.000000000 +0100
+++ vcd-0.7/vcd.c	2007-04-12 18:32:02.000000000 +0200
@@ -20,16 +20,97 @@
 #include "psdcontrol.h"
 #include "psd.h"
 #include "setup.h"
+#include "mediaservice.h"
 
 static const char *VERSION        = "0.7";
 static const char *DESCRIPTION    = "VideoCD Player";
 static const char *MAINMENUENTRY  = "VideoCD";
 
+// --- cMediaService --------------------------------------------------------
+cPlugin *cMediaService::manager = NULL;
+bool cMediaService::active = false;
+bool cMediaService::replaying = false;
+char *cMediaService::myname = NULL;
+
+cMediaService::cMediaService(const char *MyName)
+{
+  manager = NULL;
+  myname = strdup(MyName);
+}
+
+cMediaService::~cMediaService(void)
+{
+  manager = NULL;
+  free(myname);
+}
+
+void cMediaService::SetManager(cPlugin *Manager)
+{
+  manager = Manager;
+}
+
+bool cMediaService::HaveManager(void)
+{
+  if(manager) return true;
+  return false;
+}
+
+void cMediaService::SetReplaying(bool Replaying)
+{
+  if(manager && active) {
+    MediaManager_Status_v1_0 st;
+    st.set = true;
+    st.flags = MEDIA_STATUS_REPLAY;
+    st.isreplaying = Replaying;
+    manager->Service(MEDIA_MANAGER_STATUS_ID, &st);
+    replaying = Replaying;
+    }
+   else
+     replaying = false;
+}
+
+void cMediaService::SetActive(bool Active)
+{
+  active = Active;
+}
+
+bool cMediaService::IsReplaying(void)
+{
+  return replaying;
+}
+
+bool cMediaService::IsActive(void)
+{
+  return active;
+}
+
+void cMediaService::EjectDisc(void)
+{
+  if(manager && active) {
+    MediaManager_Status_v1_0 st;
+    st.set = true;
+    st.flags = MEDIA_STATUS_EJECTDISC;
+    st.ejectdisc = true;
+    manager->Service(MEDIA_MANAGER_STATUS_ID, &st);
+    }
+}
+
+void cMediaService::Suspend(bool Suspend)
+{
+  if(manager) {
+    MediaManager_Suspend_v1_0 s;
+	s.PluginName = myname;
+    s.suspend = Suspend;
+    manager->Service(MEDIA_MANAGER_SUSPEND_ID, &s);
+    }
+}
+
 class cPluginVcd : public cPlugin {
 private:
   // Add any member variables or functions you may need here.
   cVcd *vcd;
   const char *option_vcd;
+  cMediaService *mediaservice;
 public:
   cPluginVcd(void);
   virtual ~cPluginVcd();
@@ -43,6 +124,7 @@
   virtual cOsdMenu *MainMenuAction(void);
   virtual cMenuSetupPage *SetupMenu(void);
   virtual bool SetupParse(const char *Name, const char *Value);
+  virtual bool Service(const char *Id, void *Data);
   };
 
 cPluginVcd::cPluginVcd(void)
@@ -52,12 +134,14 @@
   // VDR OBJECTS TO EXIST OR PRODUCE ANY OUTPUT!
   vcd = NULL;
   option_vcd = NULL;
+  mediaservice = NULL;
 }
 
 cPluginVcd::~cPluginVcd()
 {
   // Clean up after yourself!
   delete vcd;
+  delete mediaservice;
 }
 
 const char *cPluginVcd::Description(void)
@@ -99,6 +183,32 @@
 {
   // Start any background activities the plugin shall perform.
   RegisterI18n(Phrases);
+
+  mediaservice = new cMediaService(Name());
+  cPlugin *manager = cPluginManager::GetPlugin(MEDIA_MANAGER_PLUGIN);
+  if(manager) {
+    MediaManager_Register_v1_0 reg;
+    char *buf = NULL;
+    asprintf(&buf,"%s%s","Media ",tr(MAINMENUENTRY));
+    reg.PluginName = Name();
+    reg.MainMenuEntry = buf;
+    reg.Description = tr(DESCRIPTION);
+    reg.mediatype = mtVcd;
+    reg.shouldmount = false;
+    if(manager->Service(MEDIA_MANAGER_REGISTER_ID, &reg)) {
+      char *tmp = NULL;
+      mediaservice->SetManager(manager);
+      asprintf(&tmp,"%s %s","Super ",tr(DESCRIPTION));
+      reg.Description = tmp;
+      reg.mediatype = mtSvcd;
+      manager->Service(MEDIA_MANAGER_REGISTER_ID, &reg);
+      free(buf);
+      free(tmp);
+      isyslog("vcd: Successful registered");
+      return true;
+    }
+	free(buf);
+  }
   if (option_vcd)
      vcd = new cVcd(option_vcd);
   else
@@ -113,6 +223,8 @@
 
 const char *cPluginVcd::MainMenuEntry(void)
 {
+  if(cMediaService::HaveManager())
+     return NULL;
   if (VcdSetupData.HideMainMenuEntry)
      return NULL;
   if (vcd->DriveExists()) {
@@ -217,4 +329,31 @@
   return true;
 }
 
+bool cPluginVcd::Service(const char *Id, void *Data)
+{
+  // Handle custom service requests from other plugins
+  if(Data == NULL)
+    return false;
+
+  if(strcmp(Id, MEDIA_MANAGER_ACTIVATE_ID) == 0) {
+    struct MediaManager_Activate_v1_0 *act = (MediaManager_Activate_v1_0*)Data;
+    if(act->on) {
+      if(vcd == NULL)
+        vcd = new cVcd(act->device_file);
+      cMediaService::SetActive(true);
+      return true;
+    } else {
+      cMediaService::SetActive(false);
+      return true;
+      }
+  } else if(strcmp(Id, MEDIA_MANAGER_MAINMENU_ID) == 0) {
+    if(cMediaService::IsActive()) {
+      MediaManager_Mainmenu_v1_0 *m = (MediaManager_Mainmenu_v1_0*)Data;
+      m->mainmenu = NULL;
+      }
+      return true;
+  }
+  return false;
+}
+
 VDRPLUGINCREATOR(cPluginVcd); // Don't touch this!
