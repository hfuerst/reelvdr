diff -urN dvd-0.3.6_b03.orig/control-dvd.c dvd-0.3.6_b03/control-dvd.c
--- dvd-0.3.6_b03.orig/control-dvd.c	2005-04-12 18:53:43.000000000 +0200
+++ dvd-0.3.6_b03/control-dvd.c	2007-03-24 18:30:28.000000000 +0100
@@ -20,6 +20,7 @@
 #include "tools-dvd.h"
 #include "player-dvd.h"
 #include "control-dvd.h"
+#include "mediaservice.h"
 
 #define MENUTIMEOUT     120 // seconds
 #define MAXWAIT4EPGINFO  10 // seconds
@@ -54,18 +55,28 @@
 
     player->setController(this);
 
+#if VDRVERSNUM >= 10338
+    cStatus::MsgReplaying(this, "DVD", NULL, true);
+#else
     cStatus::MsgReplaying(this, "DVD");
+#endif
+    cMediaService::SetReplaying(true);
 }
 
 cDvdPlayerControl::~cDvdPlayerControl()
 {
     Hide();
+#if VDRVERSNUM >= 10338
+    cStatus::MsgReplaying(this, NULL, NULL, false);
+#else
     cStatus::MsgReplaying(this, NULL);
+#endif
     Stop();
     assert(dvd_active == true);
     dvd_active = false;
     delete player;
     player = NULL;
+    cMediaService::SetReplaying(false);
 }
 
 bool cDvdPlayerControl::Active(void)
@@ -310,7 +321,11 @@
             lastCurrent = lastTotal = -1;
             last_title_buffer[0]=0;
             displayReplay->SetTitle("unknown title");
+#if VDRVERSNUM >= 10338
+            cStatus::MsgReplaying(this, "unknown title", NULL, true);
+#else
             cStatus::MsgReplaying(this, "unknown title");
+#endif
         }
 
         if (player) {
@@ -318,7 +333,11 @@
             if ( strcmp(title_buffer,last_title_buffer) != 0 ) {
                 displayReplay->SetTitle(title_buffer);
                 if (!Initial) displayReplay->Flush();
+#if VDRVERSNUM >= 10338
+                cStatus::MsgReplaying(this, title_buffer, NULL, true);
+#else
                 cStatus::MsgReplaying(this, title_buffer);
+#endif
                 strcpy(last_title_buffer, title_buffer);
             }
         }
@@ -568,7 +587,11 @@
 	        title_buffer = GetDisplayHeaderLine();
             if ( strcmp(title_buffer,last_title_buffer) != 0 ) {
  	            strcpy(last_title_buffer, title_buffer);
- 	            cStatus::MsgReplaying(this, title_buffer);
+#if VDRVERSNUM >= 10338
+                cStatus::MsgReplaying(this, title_buffer, NULL, true);
+#else
+                cStatus::MsgReplaying(this, title_buffer);
+#endif
             }
         }
     }
diff -urN dvd-0.3.6_b03.orig/dvd.c dvd-0.3.6_b03/dvd.c
--- dvd-0.3.6_b03.orig/dvd.c	2005-04-12 18:53:43.000000000 +0200
+++ dvd-0.3.6_b03/dvd.c	2007-04-10 22:13:31.000000000 +0200
@@ -14,17 +14,85 @@
 
 #include "dvd.h"
 
+// --- cMediaService --------------------------------------------------------
+cPlugin *cMediaService::manager = NULL;
+bool cMediaService::active = false;
+bool cMediaService::replaying = false;
+
+cMediaService::cMediaService(void)
+{
+  manager = NULL;
+}
+
+cMediaService::~cMediaService(void)
+{
+  manager = NULL;
+}
+
+void cMediaService::SetManager(cPlugin *Manager)
+{
+  manager = Manager;
+}
+
+bool cMediaService::HaveManager(void)
+{
+  if(manager) return true;
+  return false;
+}
+
+void cMediaService::SetReplaying(bool Replaying)
+{
+  if(manager && active) {
+    MediaManager_Status_v1_0 st;
+    st.set = true;
+    st.flags = MEDIA_STATUS_REPLAY;
+    st.isreplaying = Replaying;
+    manager->Service(MEDIA_MANAGER_STATUS_ID, &st);
+    replaying = Replaying;
+    }
+   else
+     replaying = false;
+}
+
+void cMediaService::SetActive(bool Active)
+{
+  active = Active;
+}
+
+bool cMediaService::IsReplaying(void)
+{
+  return replaying;
+}
+
+bool cMediaService::IsActive(void)
+{
+  return active;
+}
+
+void cMediaService::EjectDisc(void)
+{
+  if(manager && active) {
+    MediaManager_Status_v1_0 st;
+    st.set = true;
+    st.flags = MEDIA_STATUS_EJECTDISC;
+    st.ejectdisc = true;
+    manager->Service(MEDIA_MANAGER_STATUS_ID, &st);
+    }
+}
+
 // --- cPluginDvd ------------------------------------------------------------
 cPluginDvd::cPluginDvd(void)
 {
   // Initialize any member varaiables here.
   // DON'T DO ANYTHING ELSE THAT MAY HAVE SIDE EFFECTS, REQUIRE GLOBAL
   // VDR OBJECTS TO EXIST OR PRODUCE ANY OUTPUT!
+  mediaservice = NULL;
 }
 
 cPluginDvd::~cPluginDvd()
 {
   // Clean up after yourself!
+  delete(mediaservice);
 }
 
 const char *cPluginDvd::CommandLineHelp(void)
@@ -77,6 +145,23 @@
 bool cPluginDvd::Start(void)
 {
   // Start any background activities the plugin shall perform.
+  mediaservice = new cMediaService();
+  cPlugin *manager = cPluginManager::GetPlugin(MEDIA_MANAGER_PLUGIN);
+  if(manager) {
+    MediaManager_Register_v1_0 reg;
+    char *buf = NULL;
+    asprintf(&buf,"%s%s","Media ",tr(MAINMENUENTRY));
+    reg.PluginName = Name();
+    reg.MainMenuEntry = buf;
+    reg.Description = tr(DESCRIPTION);
+    reg.mediatype = mtVideoDvd;
+    reg.shouldmount = false;
+    if(manager->Service(MEDIA_MANAGER_REGISTER_ID, &reg)) {
+      mediaservice->SetManager(manager);
+      isyslog("dvd: Successful registered");
+    }
+    free(buf);
+  }
   return true;
 }
 
@@ -85,6 +170,14 @@
   // Perform any cleanup or other regular tasks.
 }
 
+const char *cPluginDvd::MainMenuEntry(void)
+{
+  if(DVDSetup.HideMainMenu || cMediaService::HaveManager())
+    return NULL;
+
+  return tr(MAINMENUENTRY);
+}
+
 cOsdMenu *cPluginDvd::MainMenuAction(void)
 {
     if (!cDvdPlayerControl::DVDActive())
@@ -117,6 +210,30 @@
         return NULL;
 }
 
+bool cPluginDvd::Service(const char *Id, void *Data)
+{
+  if(Data == NULL)
+    return false;
+
+  if(strcmp(Id, MEDIA_MANAGER_ACTIVATE_ID) == 0) {
+    struct MediaManager_Activate_v1_0 *act = (MediaManager_Activate_v1_0*)Data;
+    if(act->on) {
+      cMediaService::SetActive(true);
+      return true;
+    } else {
+      cMediaService::SetActive(false);
+      return true;
+      }
+  } else if(strcmp(Id, MEDIA_MANAGER_MAINMENU_ID) == 0) {
+    if(cMediaService::IsActive()) {
+      MediaManager_Mainmenu_v1_0 *m = (MediaManager_Mainmenu_v1_0*)Data;
+      m->mainmenu = NULL;
+      return true;
+      }
+  }
+  return false;
+}
+
 VDRPLUGINCREATOR(cPluginDvd); // Don't touch this!
 
 
diff -urN dvd-0.3.6_b03.orig/dvd.h dvd-0.3.6_b03/dvd.h
--- dvd-0.3.6_b03.orig/dvd.h	2005-04-12 18:56:07.000000000 +0200
+++ dvd-0.3.6_b03/dvd.h	2007-04-06 16:53:41.000000000 +0200
@@ -21,6 +21,7 @@
 #include "control-dvd.h"
 #include "setup-dvd.h"
 #include "i18n.h"
+#include "mediaservice.h"
 
 static const char *VERSION        = "0.3.6-b03";
 static const char *DESCRIPTION    = "Plugin.DVD$turn VDR into an (almost) full featured DVD player";
@@ -34,6 +35,7 @@
   static cSetupLine *GetSetupLine(const char *Name, const char *Plugin);
 private:
   // Add any member variables or functions you may need here.
+  cMediaService *mediaservice;
 public:
   cPluginDvd(void);
   virtual ~cPluginDvd();
@@ -44,10 +46,9 @@
   virtual bool Initialize(void);
   virtual bool Start(void);
   virtual void Housekeeping(void);
-  virtual const char *MainMenuEntry(void) {
-		return DVDSetup.HideMainMenu ? NULL : tr(MAINMENUENTRY);
-	}
+  virtual const char *MainMenuEntry(void);
   virtual cOsdMenu *MainMenuAction(void);
   virtual cMenuSetupPage *SetupMenu(void);
   virtual bool SetupParse(const char *Name, const char *Value);
+  virtual bool Service(const char *Id, void *Data);
 };
diff -urN dvd-0.3.6_b03.orig/mediaservice.h dvd-0.3.6_b03/mediaservice.h
--- dvd-0.3.6_b03.orig/mediaservice.h	1970-01-01 01:00:00.000000000 +0100
+++ dvd-0.3.6_b03/mediaservice.h	2007-03-25 14:42:44.000000000 +0200
@@ -0,0 +1,78 @@
+#ifndef _MEDIA_SERVICE_H
+#define _MEDIA_SERVICE_H
+
+#include <vdr/plugin.h>
+
+/* flags for MediaManager_Status_v1_0 */
+#define MEDIA_STATUS_REPLAY 	0x01
+#define MEDIA_STATUS_EJECTDISC	0x02
+#define MEDIA_STATUS_ACTIVE 	0x04
+#define MEDIA_STATUS_CRASHED	0x08
+
+#define MEDIA_MANAGER_REGISTER_ID	"MediaManager-Register-v1.0"
+#define MEDIA_MANAGER_ACTIVATE_ID	"MediaManager-Activate-v1.0"
+#define MEDIA_MANAGER_MAINMENU_ID	"MediaManager-Mainmenu-v1.0"
+#define MEDIA_MANAGER_STATUS_ID 	"MediaManager-Status-v1.0"
+#define MEDIA_MANAGER_PLUGIN		"mediamanager"
+
+enum eMediaType {
+	mtInvalid	= -1,
+	mtNoDisc	= 0,
+	mtBlank 	= 1,
+	mtAudio 	= 2,
+	mtVideoDvd	= 3,
+	mtSvcd		= 4,
+	mtVcd		= 5,
+	mtData		= 6,
+	mtVDRdata	= 7,
+	mtAudioData	= 8,
+	mtImageData = 9,
+	mtExternUse = 10
+};
+
+struct MediaManager_Register_v1_0 {
+	const char *PluginName;
+	const char *MainMenuEntry;
+	const char *Description;
+	eMediaType mediatype;
+	bool shouldmount;
+};
+
+struct MediaManager_Status_v1_0 {
+	bool set;
+	int flags;
+	bool isreplaying;
+	bool ejectdisc;
+	bool active;		/* read only */
+	bool crashed;
+};
+
+struct MediaManager_Activate_v1_0 {
+	bool on;
+	const char *device_file;
+	const char *mount_point;
+};
+
+struct MediaManager_Mainmenu_v1_0 {
+	cOsdObject *mainmenu;
+};
+
+class cMediaService {
+  private:
+	static cPlugin *manager;
+	static bool active;
+	static bool replaying;
+  public:
+	cMediaService(void);
+	~cMediaService(void);
+
+	void SetManager(cPlugin *Manager);
+
+	static bool HaveManager(void);
+	static void SetReplaying(bool Replaying);
+	static void SetActive(bool Active);
+	static bool IsReplaying(void);
+	static bool IsActive(void);
+	static void EjectDisc(void);
+};
+#endif
