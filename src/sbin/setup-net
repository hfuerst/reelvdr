#!/bin/bash
#
# Network Setup Script for Reelbox Avantgarde + NetClient
# Support for Wlan over Usb
#
# (C) 2007-2012 Reel Multimedia GmbH
# License: GPL V2
#
# Version 1.2
# Date 23.05.2012
#
# HISTORY:
# 23.05.12: 1.2:   allow independent configuration of bridge and vlan (RC)
#                  now it is possible to have vlan on eth1 without using the overhead of the bridge
# 11.05.12: 1.1.1: if both eth0 + eth1 are enabled, avoid conflicting configurations
#                  (we use dhcp on one of the interfaces)
# 30.03.12: 1.1:   add new parameter restartvlan, that works on Avg, to re-create vlan devices
#                  without stopping and starting eth0, eth1 (BS)
# 30.03.12: 1.0.3: set correct domain name in avahi-daemon.conf, otherwise it uses "local" (RC)
# 16.11.11: 1.0.2: Fix WLAN WPA settings, fix WLAN/WPA start/restart (RC)
# 04.10.10: 1.0.1: Fix WLAN WEP and WPA settings (written to  network/interfaces) (RC)
# 24.09.10: 1.0:   Fix WLAN with spaces in SSID or passphrase (RC)
# 25.05.10: 0.8.10: add "bridge_maxwait 3" to bridge config. Speeds up booting (RC)
# 24.03.10: 0.8.9: Fix setting VLAN in network/interfaces (pre-up vconfig ...) for eth0/NCL (RC)
# 19.01.10: 0.8.8: Fix a problem when NC_BRIDGE is on, but ETH0_BRIDGE is not set (RC)
# 27.10.09: 0.8.7: Don't use avahi-autoipd on eth0 on the AVG
# 11.08.09: 0.8.6: Set the correct hostname that dhclient announces
# 05.08.09: 0.8.5: Use dhclient leases file if there (/var/lib/dhcp3/dhclient.*)
# 30.07.09  0.8.4: Prevent writing gateway to network/interfaces if GATEWAY is empty (RC)
# 06.07.09  0.8.3: load the 8021q-module if not loaded yet (TB)
# 02.07.09  0.8.2: Fixes for vlan on NetClient
# 18.05.09  0.8.1: Fixes for NetClient
# 14.05.09  0.8: Heavily rewritten for support of bridge/VLAN and RB NetClient (RC)
#           0.7: first support for VLANs (carwasher)
#           0.6: first support for bridge (wade)
# 29.07.08  0.5: Added Support for Atheros Mini-Pci (AR)
#
#
# TODO: seperate the configuration part from the start/stop part
#       eliminate the handling of the WPA key in this script and the sysconfig file
#          (should be set from the setup-pi once)

PATH="/sbin:/bin/:/usr/bin:/usr/sbin"

SYSCONFIG="/etc/default/sysconfig"
. $SYSCONFIG
. /etc/default/globals

#Global vars
if [ "$1" = "" ];then
	SOPTION="start"
else
	SOPTION="$1"
fi

set -x

# wlan

WLAN_DRIVERS="ath_pci"
WLAN_DEVICES="ath0 wlan0"
WLAN_WPA_CONFIG="/etc/wpa_supplicant/wpa_supplicant.conf"

#
# Functions
#
syntax () {
cat << EOF
Usage: `basename $0` [start | stop | restart | wlan]
Options:
     [start | stop | restart |wlan]
     no option: start

Description:
     Sets up ReelBox Networking
EOF
}


fix_iftab () {
	# write mac to iftab
	cat > /etc/iftab << EOF
# This file assigns persistent names to network interfaces.
# See iftab(5) for syntax.

EOF

}

write_etc_hosts () {
	cat > /etc/hosts << EOF
127.0.0.1 localhost

# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts

192.168.99.129 hdext
EOF
}


fstart_pre () {
	echo search $DOMAIN > /etc/resolv.conf
	test "$NAMESERVER" = "0.0.0.0" && NAMESERVER=""
	if [ "$NAMESERVER" != "" ] ; then
		echo "nameserver $NAMESERVER" >> /etc/resolv.conf
	fi
	if [ "$NAMESERVER2" != "" ] ; then
		echo "nameserver $NAMESERVER2" >> /etc/resolv.conf
	fi
	if [ "$NAMESERVER3" != "" ] ; then
		echo "nameserver $NAMESERVER3" >> /etc/resolv.conf
	fi

	echo "$HOSTNAME" > /etc/hostname
	hostname $HOSTNAME

	# /etc/hosts
	write_etc_hosts

	cat > /etc/network/interfaces << EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
#
# WARNING: This file is auto-generated by the ReelBox setup, so you
#          should not edit it manually. Use the setup menu instead.
#
# The loopback network interface
auto lo
iface lo inet loopback
address 127.0.0.1
netmask 255.0.0.0

EOF

#if [ "$WLAN" = "yes" ] && [ "WLAN_MODUS" = "WPA" ]; then
#	cat > $WLAN_WPA_CONFIG << EOF
#ctrl_interface=/var/run/wpa_supplicant
#EOF
#fi

# write hostname to dhclient.conf
sed s/'send host-name.*'/"send host-name \"$HOSTNAME\";"/ -i /etc/dhcp3/dhclient.conf

# set correct domain name for avahi daemon
sed s/.*domain-name=.*/domain-name=$DOMAIN/ -i /etc/avahi/avahi-daemon.conf

}

BR_DEV=""
NC_DEV="eth0"
ETH1_DEV="eth1"
ETH2_DEV="eth2"
VLAN_DEV="vlan$VLAN_ID"

VCONFIG="/sbin/vconfig"
BRCTL="/usr/sbin/brctl"

bridge_setup () {
	echo "DEBUG: Configuring netceiver device "
	sed s/"use-ipv6=.*"/"use-ipv6=yes"/ -i /etc/avahi/avahi-daemon.conf
	if  [ "$NC_BRIDGE" = "yes" ]; then
		if [ "$ETH0_BRIDGE" = "Ethernet 2" ] ; then
			BR_DEV="eth2"
			NC_DEV="br0"
			ETH2_DEV="br0"
			if  [ "$VLAN" = "yes" ]; then
				BR_DEV="$VLAN_DEV"
				ETH2_DEV="eth2"
			fi
		else
			BR_DEV="eth1"
			NC_DEV="br0"
			ETH1_DEV="br0"
			if  [ "$VLAN" = "yes" ]; then
				BR_DEV="$VLAN_DEV"
				ETH1_DEV="eth1"
			fi
		fi
	fi

	ifconfig br0 down # make sure bridge is down before deleting
	$BRCTL delbr br0
}

bridge_up () {
	#if [ "$BR_DEV" = "$1" ]; then
		$BRCTL addbr br0
		$BRCTL addif br0 eth0
		$BRCTL addif br0 $BR_DEV
		$BRCTL stp br0 on
		ifconfig $BR_DEV 0.0.0.0

                # work around for kernel bug
		echo 0 > /sys/devices/virtual/net/br0/bridge/multicast_snooping
	#fi
}

add_to_hosts () {
	IF=$1
	if grep -q $HOSTNAME /etc/hosts ; then
		echo "$IP  $HOSTNAME-$IF  $HOSTNAME-$IF.$DOMAIN" >> /etc/hosts
	else
		echo "$IP  $HOSTNAME  $HOSTNAME.$DOMAIN" >> /etc/hosts
	fi
}

dhcp_ip_to_hosts () {
    (
	IF=$1
	count=0
	while [ "$DHCP_IP" == ""  ] ; do
		DHCP_IP=`ifconfig $IF | grep 'inet ' | cut -d ':' -f 2 | cut -d ' ' -f 1`
		if [ "$DHCP_IP" != "" ] ; then
			write_etc_hosts
			echo "$DHCP_IP $HOSTNAME" >> /etc/hosts
		fi
		if [ $((count++)) -gt 7 ]; then
			echo "No DHCP LEASE"
			break
		fi
		echo "==> sleep 1"
		sleep 1
	done
    ) >/dev/null 2>&1 &
}

rm_ip_from_hosts () {
	sed -i /$HOSTNAME.*/d /etc/hosts
}

ToUpper() { echo $* | tr '[a-z]' '[A-Z]' ;}

configure_ether_device () {
	device=$1
	DEVICE=$(ToUpper $device)
	DEVICE_ENABLED=$(eval echo $\{`ToUpper $device`})

	use_dhcp=$(eval echo $\{`ToUpper $device`_USE_DHCP})

	set -x
	if [ $device == eth0 ] && [ "$ETH1" == "yes" ] ; then
		#avoid double configuration of eth0+1
		if [ -e /sys/class/net/eth1 ] ; then
		    DEVICE_ENABLED="no"
		    use_dhcp="yes"  # force dhcp
		else
		    DEVICE_ENABLED="yes"
		    [ -z "$ETH1_IP" ] && use_dhcp="yes"
		    ETH1_USE_DHCP="yes"
		    NC_BRIDGE="no"
		fi
	fi

	if [ "$DEVICE_ENABLED" = "yes" ]; then  # enabled?

		echo "DEBUG: Configuring $device"
		echo "auto ${device}" >> /etc/network/interfaces

		if [ "$device" = "br0" ]; then
			bridge_up $device
		fi
		ifconfig $device up

		if [ "$use_dhcp" = "yes" ]; then
			# DHCP
			#MEMBER of the bridge? (not the bridge br0 itself!)
			if [ "$device" = "$BR_DEV" ]; then
				#echo "iface $device inet ipv4ll" >> /etc/network/interfaces
				#avahi-autoipd -D $device

				BR0="yes"
				BR0_USE_DHCP="yes"
				bridge_up $BR_DEV
			else
				echo "iface $device inet dhcp" >> /etc/network/interfaces
				if [ "$device" = "br0" ]; then
					echo "bridge_ports eth0 $BR_DEV" >> /etc/network/interfaces
					echo "bridge_maxwait 3" >> /etc/network/interfaces
                                        # work around for kernel bug
                                        echo "up echo 0 > /sys/devices/virtual/net/$device/bridge/multicast_snooping" >> /etc/network/interfaces
				fi

				if [ -f /var/lib/dhcp3/dhclient.$device.leases ]; then
					DHCL_OPTIONS="-q -lf /var/lib/dhcp3/dhclient.$device.leases"
				fi

				dhclient3 $DHCL_OPTIONS $device &
				dhcp_ip_to_hosts $device
			fi
		else
			# static ip
			#eval echo $\{${DEVICE}_DEV}
			IP=$(eval echo $\{${DEVICE}_IP})
			NETMASK=$(eval echo $\{${DEVICE}_NETMASK})

			#MEMBER of the bridge? (not the bridge br0 itself!)
			if [ "$device" = "$BR_DEV" ]; then
				# we end this configuration as the ip must be configured to the
				# bridge device. This will be done later.
				#echo "iface $device inet ipv4ll" >> /etc/network/interfaces
				#avahi-autoipd -D $device

				BR0="yes"
				BR0_USE_DHCP="no"
				BR0_IP="$IP"
				BR0_NETMASK="$NETMASK"
				bridge_up $BR_DEV
			else # no bridge member or the bridge itself
				echo "iface $device inet static" >> /etc/network/interfaces
				echo "address $IP" >> /etc/network/interfaces
				echo "netmask $NETMASK" >> /etc/network/interfaces
				[ "$GATEWAY" != "" ] && echo "gateway $GATEWAY" >> /etc/network/interfaces
				if [ "$device" = "br0" ]; then
					echo "bridge_ports eth0 $BR_DEV" >> /etc/network/interfaces
					echo "bridge_maxwait 3" >> /etc/network/interfaces
				fi
				add_to_hosts $device
				ifconfig $device $IP netmask $NETMASK up
			fi
		fi
		echo "" >> /etc/network/interfaces

		#if [ $device == eth0 ] && [ "$VLAN" == "yes" ]; then
		#fi

	elif ifconfig $device up 2>/dev/null ; then
		# device is not enabled/configured.
		# to be save, we let it auto-configure it with Avahi
		echo "auto $device" >> /etc/network/interfaces
		if RbMini ; then
			echo "iface $device inet ipv4ll" >> /etc/network/interfaces
		else
			echo "iface $device inet manual" >> /etc/network/interfaces
			echo "up ifconfig $device up" >> /etc/network/interfaces
		fi

		if [ "$device" = "br0" ]; then
                        #work around for kernel bug
			echo "up echo 0 > /sys/devices/virtual/net/$device/bridge/multicast_snooping" >> /etc/network/interfaces
			echo "bridge_ports eth0 $BR_DEV" >> /etc/network/interfaces
			echo "bridge_maxwait 3" >> /etc/network/interfaces
			#bridge_up $device ipv4ll
		fi

		if RbMini ; then
			avahi-autoipd -D $device
		fi
		echo "" >> /etc/network/interfaces
	fi
	#echo "" >> /etc/network/interfaces
#set +x
}

configure_vlan() {
	if [ "$VLAN" = "yes" ] ; then
		# load 8021q-module if not loaded yet
		if [ -z $(lsmod|grep 8021q) ]; then
			modprobe 8021q
		fi

		if [ "$NC_BRIDGE" = "yes" ] ; then
			if [ "$ETH0_BRIDGE" = "Ethernet 2" ] ; then
				vlan_raw_device="eth2"
			else
				vlan_raw_device="eth1"
			fi

			# VLAN device entry
			echo "auto $VLAN_DEV" >> /etc/network/interfaces
			echo "iface $VLAN_DEV inet manual" >> /etc/network/interfaces
			echo "mtu 1500" >> /etc/network/interfaces
			echo "vlan_raw_device $vlan_raw_device" >> /etc/network/interfaces
			echo "" >> /etc/network/interfaces

			# bring up VLAN
			$VCONFIG set_name_type VLAN_PLUS_VID_NO_PAD
			$VCONFIG add $vlan_raw_device $VLAN_ID
			ifconfig vlan$VLAN_ID mtu 1500 up

			# bring up the bridge, the device will be configured later
			bridge_up $BR_DEV

			#bridge device entry
			#echo "auto $NC_DEV" >> /etc/network/interfaces
			#echo "iface $NC_DEV inet ipv4ll" >> /etc/network/interfaces
			#echo "bridge_ports eth0 $BR_DEV" >> /etc/network/interfaces
			#echo "" >> /etc/network/interfaces

			#/etc/init.d/networking restart &
			#sleep 3
		else
			if [ -e /sys/class/net/eth1 ] ; then
			    #configure VLAN on eth1
			    device=eth1
			else
			    #configure VLAN on eth0
			    device=eth0
			fi

			$VCONFIG set_name_type DEV_PLUS_VID_NO_PAD
			$VCONFIG add $device $VLAN_ID
			ifconfig ${device}.${VLAN_ID} up

			#device=$device.$VLAN_ID
			NC_DEV=$device.$VLAN_ID
			echo "auto ${device}.${VLAN_ID}" >> /etc/network/interfaces
			echo "iface ${device}.${VLAN_ID} inet manual" >> /etc/network/interfaces
			echo "pre-up vconfig add ${device} ${VLAN_ID}" >> /etc/network/interfaces
			echo "post-up ifconfig ${device}.${VLAN_ID} up" >> /etc/network/interfaces
			echo "" >> /etc/network/interfaces

		fi
	fi

}

ether_start () {
	echo configure_ether_device eth0
	configure_ether_device eth0

	echo configure_ether_device eth1
	configure_ether_device eth1

	echo configure_ether_device eth2
	configure_ether_device eth2

	echo configure_vlan
	configure_vlan

	echo configure_ether_device br0
	configure_ether_device br0

}

netceiver_setup () {
	if grep -q NETWORK_INTERFACE /etc/default/mcli ; then
		sed s/"NETWORK_INTERFACE=.*"/"NETWORK_INTERFACE=\"$NC_DEV\""/ -i /etc/default/mcli
	else
		echo "NETWORK_INTERFACE=\"$NC_DEV\"" >> /etc/default/mcli
	fi

	if [ "$NC_BRIDGE" = "yes" ]; then
	    if [ "$ETH1_USE_DHCP" = "yes" ] && [ "$ETH2_USE_DHCP" = "yes" ]; then
		(
		sleep 10
		/etc/init.d/mcli restart ) &
	    else
		(
		sleep 5
		/etc/init.d/mcli restart ) &
	    fi
	else
	    /etc/init.d/mcli restart &
	fi
        svdrpsend.sh plug mcli reinit $NC_DEV >/dev/null 2>&1 &
}

IWC () {
	/sbin/iwconfig $WDEV "$@"
}


wlan_device () {
	for mod in $WLAN_DRIVERS ; do
		modprobe $mod
	done

	CARDFOUND=no
	for WDEV in $WLAN_DEVICES; do
		ifconfig $WDEV up
		if `ifconfig | grep $WDEV >/dev/null` ; then
			CARDFOUND=yes
			break
		fi
	done
}

wlan_config () {
	if [ "$WLAN" = "yes" ] ; then
		if [ "$WLAN_DHCP" = "yes" ]; then
			# Wlan DHCP
			echo "auto $WDEV" >> /etc/network/interfaces
			echo "iface $WDEV inet dhcp" >> /etc/network/interfaces
		else # Wlan STATIC
			echo "auto $WDEV" >> /etc/network/interfaces
			add_to_hosts $WDEV

			echo "iface $WDEV inet static" >> /etc/network/interfaces
			echo "address $WLAN_IP" >> /etc/network/interfaces
			echo "netmask $WLAN_NETMASK" >> /etc/network/interfaces
			[ "$GATEWAY" != "" ] && echo "gateway $GATEWAY" >> /etc/network/interfaces
		fi

		if [ "$WLAN_MODUS" = "WPA" ]; then
			echo "wpa-conf $WLAN_WPA_CONFIG" >> /etc/network/interfaces
		elif [ "$WLAN_MODUS" = "WEP" ]; then
			echo "wireless-keymode $WLAN_SEC" >> /etc/network/interfaces
			echo "wireless-mode $WLAN_MODE" >> /etc/network/interfaces
			echo "wireless-channel $WLAN_CHANNEL" >> /etc/network/interfaces
			echo "wireless-essid $WLAN_SSID" >> /etc/network/interfaces
			if [ "$WLAN_WEP_KEY" = "1" ]; then
				echo "wireless-key $WLAN_WEP_KEY_1" >> /etc/network/interfaces
			elif [ "$WLAN_WEP_KEY" = "2" ]; then
				echo "wireless-key $WLAN_WEP_KEY_2" >> /etc/network/interfaces
			elif [ "$WLAN_WEP_KEY" =  "3" ]; then
				echo "wireless-key $WLAN_WEP_KEY_3" >> /etc/network/interfaces
			elif [ "$WLAN_WEP_KEY" = "4" ]; then
				echo "wireless-key $WLAN_WEP_KEY_4" >> /etc/network/interfaces
			fi
		fi # WPA / WEP
		echo "" >> /etc/network/interfaces
	fi # WLAN=yes
}

config_wpa_supplicant () {
	if [ "$WLAN_MODUS" = "WPA" ]; then
		echo "ctrl_interface=/var/run/wpa_supplicant" > $WLAN_WPA_CONFIG
		wpa_passphrase "$WPA_SSID" "$PSK_PLAIN" >> $WLAN_WPA_CONFIG
	fi
}

wlan_up () {
	if [ "$CARDFOUND" = "yes" ] ; then
		IWC mode $WLAN_MODE
		[ "$WLAN_CHANNEL" != "" ] && IWC channel $WLAN_CHANNEL
		IWC essid "${WLAN_SSID}"
		if [ "$WLAN_MODUS" = "WPA" ]; then
		    #restart wpa: wpa_cli terminate
		    #if ! $(ps ax | grep wpa_supp | grep -v grep); then
		    if wpa_cli status >/dev/null 2>&1 ; then
			    wpa_cli reconfigure
		    else
			    wpa_supplicant -B -i $WDEV -c $WLAN_WPA_CONFIG -P /var/run/wpa_supplicant.$WDEV.pid
			    # -s #log to syslog
		    fi

		else

		    if [ "$WLAN_WEP_KEY" = "none" ]; then
			    IWC key off
		    else
			    for count in 1 2 3 4 ; do
				    eval KEY=$`echo WLAN_WEP_KEY_$count`
				    IWC key $SEC "[$count]" $KEY
			    done
			    IWC key "[$WLAN_WEP_KEY]"
		    fi
		fi

		if [ "$WLAN_DHCP" = "yes" ]; then
			ifconfig $WDEV up

			DHCL_OPTIONS="-q -lf /var/lib/dhcp3/dhclient.$WDEV.leases"
			DHCL_OPTIONS="$DHCL_OPTIONS -pf /var/run/dhclient.$WDEV.pid"

			dhclient3 $DHCL_OPTIONS $WDEV &
			dhcp_ip_to_hosts $WDEV
		else
			ifconfig $WDEV $WLAN_IP netmask $WLAN_NETMASK up
		fi
	else
		echo "No WLAN interface found"
	fi
}

set_default_gateway () {
	if [ "$WLAN" = "yes" ] && [ "$WLAN_DHCP" = "no" ] || [ "$ETH0" = "yes" ] || [ "$ETH1" = "yes" ] || [ "$ETH2" = "yes" ] ; then
		[ "$GATEWAY" != "" ] && route add default gw $GATEWAY
	fi
}

vlan_stop () {
	for vlan in `cat /proc/net/vlan/config 2>/dev/null | grep ^vlan | awk '{ print $1 }'`; do
		$VCONFIG rem $vlan
	done
}

ether_stop () {
	[ -f /var/run/dhclient.* ] && killall dhclient3 ; rm -f /var/run/dhclient.*
	for iface in br0 eth0 eth1 eth2 $WLAN_DEVICES; do
		if [ -e /sys/class/net/$iface ]; then
			echo "taking down $iface"
			ifconfig $iface 0.0.0.0
			RbIce || ifconfig $iface down
		fi
	done
}

case $SOPTION in
	start)
		fix_iftab
		fstart_pre
		bridge_setup
		ether_start
		netceiver_setup

		if [ "$WLAN" = "yes" ]; then
		    if [ "$WLAN_MODUS" = "WPA" ]; then
			config_wpa_supplicant
		    fi
		    wlan_device
		    wlan_config
		    wlan_up
		fi
		set_default_gateway
		if [ "$START_SMBSRV" = "yes" ]; then
		    /usr/sbin/setup-samba restart &
		else
		    echo "Samba server turned off in sysconfig - not starting."
		fi
		;;
	stop)
		ether_stop
		vlan_stop

		for mod in $WLAN_DRIVERS ; do
			grep -q $mod /proc/modules && rmmod $mod
	        done
		;;
	restart)
		$0 stop
		rm_ip_from_hosts
		sleep 1;
		$0 start
		;;
	restartvlan)
# does not work for netclient...ie vlan not set on eth0
		vlan_stop
		bridge_setup
		configure_vlan
		configure_ether_device br0 #config the bridge
		bridge_up

		netceiver_setup
		;;
	wlan)
		if [ "$WLAN" = "yes" ]; then
			[ ! -f /etc/wpa_supplicant/wpa_supplicant.conf ] && config_wpa_supplicant
			wlan_device
			wlan_up
		   #if [ "WLAN_MODUS" = "WPA" ]; then
			#/etc/init.d/networking restart &
		   #fi
		fi
		;;
	-h)
		syntax
		exit 0
		;;
	*)
		echo "Unknown option $SOPTION."
		syntax
		exit 2
		;;
esac

exit 0
