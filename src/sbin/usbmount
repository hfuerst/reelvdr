#!/bin/sh
# This script mounts USB mass storage devices when they are plugged in
# and unmounts them when they are removed.
# Copyright (C) 2004, 2005 Martin Dickopp
#               2007-2012  Reel Multimedia GmbH
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#

exec > /dev/null 2>&1
#exec > /tmp/usbmount.$$ 2>&1

# Log a string via the syslog facility.
log()
{
    if test $1 != debug || expr "$VERBOSE" : "[yY]" > /dev/null; then
	logger -p user.$1 -t "usbmount[$$]" -- "$2"
    fi
}


# Test if the first parameter is in the list given by the second
# parameter.
in_list()
{
    for v in $2; do
	test "$1" != "$v" || return 0
    done
    return 1
}


# Create /var/run/usbmount if it doesn't exist
test -d /var/run/usbmount || mkdir /var/run/usbmount

# Default values for configuration variables.
MOUNTPOINTS=""
MOUNTPOINT_STYLE="friendly"
MEDIADIR="/media"
FILESYSTEMS=""
MOUNTOPTIONS=""
FS_MOUNTOPTIONS=""
VERBOSE="no"
USE_HAL=true

FAT_OPTIONS="umask=0000,fmask=0111,shortname=winnt,utf8"
NTFS_OPTIONS="fmask=0111,dmask=000,force,nls=utf8,locale=de_DE.UTF-8,$4"
halmtab=$MEDIADIR/.hal-mtab
mymtab="/var/run/usbmount/mounts"
MY_CONFIG="/etc/usbmount/usbmount.conf"


# Read configuration file.
if test -r $MY_CONFIG ; then
    . $MY_CONFIG
fi

#set
#set -x


ChkFs () {
	case $ID_FS_TYPE in
		msdos|vfat|ext2|ext3|ext4|jfs|xfs)
			log info "doing fsck for $DEVNAME"
			fsck -y $DEVNAME
			;;
		reiserfs|ntfs)
			# no fsck needed or available
			log info "no fsck required or available for $ID_FS_TYPE"
			;;
		*)
			log error "unknown filesystem $ID_FS_TYPE"
			;;
	esac
}

GetMountpoint () {
	# Search an available mountpoint.
	case $MOUNTPOINT_STYLE in
		friendly)
			# ID_TYPE floppy very rarely has a valid vendor id
			if [ ! -z $vendor ] ;then
				mp_pre=`echo ${vendor}_${model} | sed 's/ /_/g; s/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._-]//g'`
			else
				mp_pre=`echo ${model} | sed 's/ /_/g; s/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._-]//g'`
			fi
			;;
		sober)
			mp_pre=${ID_BUS}${ID_TYPE}
			;;
		techie)
			mp_pre=`echo $DEVNAME | awk -F/ '{ print $3 }'`
			;;
	esac

	#check how many partitions are on this device
	sys_base=`echo /sys$DEVPATH | rev | cut -f2- -d/ | rev `
	part_count=$((`find $sys_base -name size | wc -l` - 1))

	#number partitions if there is more than one
	if [ $part_count -gt 1 ] ; then
		part_num=`echo $DEVNAME | tr -d [a-z/]`
		mp_pre=${mp_pre}_vol${part_num}
		export part_num
	fi

	if grep $mp_pre /proc/mounts ; then
		count="1"
		while [ $count -lt 50 ] ; do
			mp_new=${mp_pre}_${count}
			if ! grep $mp_new /proc/mounts && \
					( [ -d $MEDIADIR/$mp_new ] || [ ! -e $MEDIADIR/$mp_new ] ) ; then
				break
			fi
			$((count++))
		done
		mountpoint=$MEDIADIR/$mp_new
		mountname=$mp_new
	else
		mountpoint=$MEDIADIR/$mp_pre
		mountname=$mp_pre
	fi
	export mountpoint
	export mountname

	#for v in $MOUNTPOINTS; do
	#if test -d "$v" \
	#	&& ! grep -q "^[^ ][^ ]*  *$v " /proc/mounts; then
	#	mountpoint="$v"
	#	log debug "mountpoint $mountpoint is available for $DEVNAME"
	#	break
	#fi
	#done
}

DoMount () {
	# create mountpoint
	if [ ! -d $mountpoint ] ; then
		install -m 000 -d $mountpoint
	fi

	MAP_USER="1000"
	MAP_GROUP=""

	case $fstype in
		msdos|vfat)
			options=$FAT_OPTIONS,$options

			[ -n "$MAP_USER" ] && options=$options,uid=$MAP_USER
			[ -n "$MAP_GROUP" ] && options=$options,gid=$MAP_GROUP

			FAT=true	# will be used later to try to mount using codepages

			#force msdos fs's to be mounted as vfat
			[ "$fstype" = "msdos" ] && fstype=vfat
			;;
		ntfs)
			options=$NTFS_OPTIONS,$options
			[ -n "$MAP_USER" ] && options=$options,uid=$MAP_USER
			[ -n "$MAP_GROUP" ] && options=$options,gid=$MAP_GROUP
			;;
		xfs)
			;;
		ext2|ext3|ext4|jfs|minix)
			;;
		reiserfs)
			;;
		*)
			log info "Unknown fs $TYPE"
			;;

	esac

	# Mount the filesystem.
	log info "executing command: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint"
	mount "-t$fstype" "${options:+-o$options}" "$DEVNAME" "$mountpoint"

        mount_success=$?

        if [ $mount_success -eq 0 ] ; then
            echo "$DEVNAME" "$mountpoint" "$mountname" >> $mymtab

            # write hal information
            if $USE_HAL ; then
                    grep $DEVNAME /proc/mounts | \
                            while read dev mp fs options rest ; do
                                    [ -z $MAP_USER ] && MAP_USER=0
                                    [ -z $MAP_GROUP ] && MAP_GROUP=0
                                    echo "$dev\t$MAP_USER\t$MAP_GROUP\t$fs\t$options\t$mp" >> $halmtab
                            done
            fi
        else
            log error "mounting failed with reason $mount_success"
        fi
}


umask 022

if test "$1" = add; then

    # Acquire lock.
    log debug "trying to acquire lock /var/run/usbmount/.mount.lock"
    lockfile-create --retry 3 /var/run/usbmount/.mount || \
	{ log err "cannot acquire lock /var/run/usbmount/.mount.lock"; exit 1; }
    trap '( lockfile-remove /var/run/usbmount/.mount )' 0
    log debug "acquired lock /var/run/usbmount/.mount.lock"

    # Try to read from the device.  Some devices need a few seconds
    # initialization time before they can be accessed.  Give up after
    # 20 seconds.  Thanks to Peter Stelmachovic for his help with
    # debugging this.
    log debug "testing whether $DEVNAME is readable"
    read_success=no

    for t in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
	if dd if="$DEVNAME" of=/dev/null bs=512 count=1; then
	    read_success=yes
	    break
	fi
	log debug "attempt $t to read from $DEVNAME failed"
	sleep 1
    done
    if test "$read_success" != yes; then
	log err "cannot read from $DEVNAME"
	exit 1
    fi

    # Test if the device contains a filesystem.  If it doesn't, no
    # further action is required, but calling vol_id has the side effect
    # that the partition table is read and partition devices are created.
    #
    # fills in ID_FS_UUID  ID_FS_UUID_ENC  ID_FS_VERSION  ID_FS_TYPE  ID_FS_USAGE
    if [ -x /lib/udev/vol_id ] ; then
	# old Ubuntu releases
	eval $(/lib/udev/vol_id "$DEVNAME")
    else
	# Ubuntu 10
	eval $(/sbin/blkid -p "$DEVNAME" -o udev)
    fi


    if echo $ID_FS_USAGE  | egrep -q '^(filesystem|disklabel)$'; then
	log debug "$DEVNAME contains a filesystem or disklabel"

	fstype=$ID_FS_TYPE
	log info "$DEVNAME contains filesystem type $fstype"

	# test if device is already mounted (maybe the root device)
	if egrep -q "^[[:blank:]]*$DEVNAME" /proc/mounts || grep -q $ID_FS_UUID /proc/mounts || [ $DEVNAME = /dev/`readlink /dev/root` ] ; then
		log error "device $DEVNAME already mounted. Doing nothing"
		exit 0
	fi

	# Try to use specifications in /etc/fstab first.
	if egrep -q "^[[:blank:]]*$DEVNAME" /etc/fstab; then
		log info "executing command: mount $DEVNAME"
		mount $DEVNAME

	elif grep -q $ID_FS_UUID /etc/fstab; then
		log info "executing command: mount -U $ID_FS_UUID"
		mount -U $ID_FS_UUID

	# Test if the filesystem type is in the list of filesystem
	# types to mount.
	elif in_list "$fstype" "$FILESYSTEMS"; then

		# Determine vendor and model.
		vendor=""
		if [ ! "$ID_TYPE" = "floppy" ] ; then
			if test -r "/sys$DEVPATH/device/vendor"; then
			vendor="`cat \"/sys$DEVPATH/device/vendor\"`"
			elif test -r "/sys$DEVPATH/../device/vendor"; then
			vendor="`cat \"/sys$DEVPATH/../device/vendor\"`"
			elif test -r "/sys$DEVPATH/device/../manufacturer"; then
			vendor="`cat \"/sys$DEVPATH/device/../manufacturer\"`"
			elif test -r "/sys$DEVPATH/../device/../manufacturer"; then
			vendor="`cat \"/sys$DEVPATH/../device/../manufacturer\"`"
			fi
			vendor="`echo \"$vendor\" | sed 's/^ *//; s/ *$//'`"
		fi

		model=
		if test -r "/sys$DEVPATH/device/model"; then
		    model="`cat \"/sys$DEVPATH/device/model\"`"
		elif test -r "/sys$DEVPATH/../device/model"; then
		    model="`cat \"/sys$DEVPATH/../device/model\"`"
		elif test -r "/sys$DEVPATH/device/../product"; then
		    model="`cat \"/sys$DEVPATH/device/../product\"`"
		elif test -r "/sys$DEVPATH/../device/../product"; then
		    model="`cat \"/sys$DEVPATH/../device/../product\"`"
		fi
		model="`echo \"$model\" | sed 's/^ *//; s/ *$//'`"
		export vendor model

		GetMountpoint

	    if test -n "$mountpoint"; then
		# Determine mount options.
		options=""
		for v in $FS_MOUNTOPTIONS; do
		    if expr "$v" : "-fstype=$fstype,."; then
			options="`echo \"$v\" | sed 's/^[^,]*,//'`"
			break
		    fi
		done
		if test -n "$MOUNTOPTIONS"; then
		    options="$MOUNTOPTIONS${options:+,$options}"
		fi

		export ACTION="fsck"
		if [ "$FSCK" = "false" ] || [ "$FSCK" = "no" ] || [ "$FSCK" = "off" ]; then
			log info "WARNING: fsck disabled in $MY_CONFIG. Mounting may fail."
		else
			run-parts /etc/usbmount/mount.d || :
			ChkFs
		fi

		DoMount


		# Run hook scripts; ignore errors.
		export UM_DEVICE="$DEVNAME"
		export UM_MOUNTPOINT="$mountpoint"
		export UM_FILESYSTEM="$fstype"
		export UM_MOUNTOPTIONS="$options"
		export UM_VENDOR="$vendor"
		export UM_MODEL="$model"
		log info "executing command: run-parts /etc/usbmount/mount.d"
		if [ $mount_success = 0 ]; then
                    export ACTION="add"
                else
                    export ACTION="add-failed" REASON="$mount_success"
                fi
		run-parts /etc/usbmount/mount.d || :
	    else
		# No suitable mount point found.
		log warning "no mountpoint found for $DEVNAME"
		exit 1
	    fi
	fi
    else
	log debug "$DEVNAME does not contain a filesystem or disklabel"
    fi

elif test "$1" = remove; then
    # A block or partition device has been removed.
    # Test if it is mounted.

    if grep -q $DEVNAME $mymtab && $USE_HAL ; then
	log debug "$DEVNAME is mounted by usbmount"

	export UM_DEVICE="$DEVNAME"
	export UM_MOUNTPOINT=`grep $DEVNAME $mymtab | awk '{print $2}'`
	export mountname=`grep $DEVNAME $mymtab | awk '{print $3}'`
	export UM_FILESYSTEM="$fstype"

	#rm my-mtab entry
	sed "\%$DEVNAME%d" -i $mymtab

	log info "executing command: umount $DEVNAME"
	umount -l $DEVNAME
	rmdir $mountpoint

	# Run hook scripts; ignore errors.
	log info "executing command: run-parts /etc/usbmount/umount.d"
	run-parts /etc/usbmount/umount.d || :
    else
	while read device mountpoint fstype remainder; do
		if test "$DEVNAME" = "$device"; then
		# If the mountpoint and filesystem type are maintained by
		# this script, unmount the filesystem.
		#if in_list "$mountpoint" "$MOUNTPOINTS" \
			#&& in_list "$fstype" "$FILESYSTEMS"; then

			log info "executing command: umount -l $mountpoint"
			umount -l "$mountpoint"

			rmdir $mountpoint

			# Run hook scripts; ignore errors.
			export UM_DEVICE="$DEVNAME"
			export UM_MOUNTPOINT="$mountpoint"
			export UM_FILESYSTEM="$fstype"
			log info "executing command: run-parts /etc/usbmount/umount.d"
			run-parts /etc/usbmount/umount.d || :
		#fi
		break
		fi
	done < /proc/mounts
    fi
fi

exit 0
